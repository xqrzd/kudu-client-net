// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kudu/consensus/metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Knet.Kudu.Client.Protobuf.Consensus {

  /// <summary>Holder for reflection information generated from kudu/consensus/metadata.proto</summary>
  public static partial class MetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for kudu/consensus/metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1rdWR1L2NvbnNlbnN1cy9tZXRhZGF0YS5wcm90bxIOa3VkdS5jb25zZW5z",
            "dXMaGGt1ZHUvY29tbW9uL2NvbW1vbi5wcm90byJBCg9SYWZ0UGVlckF0dHJz",
            "UEISFgoHcHJvbW90ZRgBIAEoCDoFZmFsc2USFgoHcmVwbGFjZRgCIAEoCDoF",
            "ZmFsc2UipgEKDkhlYWx0aFJlcG9ydFBCEkMKDm92ZXJhbGxfaGVhbHRoGAEg",
            "ASgOMisua3VkdS5jb25zZW5zdXMuSGVhbHRoUmVwb3J0UEIuSGVhbHRoU3Rh",
            "dHVzIk8KDEhlYWx0aFN0YXR1cxIMCgdVTktOT1dOEOcHEgoKBkZBSUxFRBAA",
            "EgsKB0hFQUxUSFkQARIYChRGQUlMRURfVU5SRUNPVkVSQUJMRRACIosDCgpS",
            "YWZ0UGVlclBCEhYKDnBlcm1hbmVudF91dWlkGAEgASgMEjoKC21lbWJlcl90",
            "eXBlGAIgASgOMiUua3VkdS5jb25zZW5zdXMuUmFmdFBlZXJQQi5NZW1iZXJU",
            "eXBlEikKD2xhc3Rfa25vd25fYWRkchgDIAEoCzIQLmt1ZHUuSG9zdFBvcnRQ",
            "QhIuCgVhdHRycxgEIAEoCzIfLmt1ZHUuY29uc2Vuc3VzLlJhZnRQZWVyQXR0",
            "cnNQQhI1Cg1oZWFsdGhfcmVwb3J0GAUgASgLMh4ua3VkdS5jb25zZW5zdXMu",
            "SGVhbHRoUmVwb3J0UEIiVQoEUm9sZRIRCgxVTktOT1dOX1JPTEUQ5wcSDAoI",
            "Rk9MTE9XRVIQABIKCgZMRUFERVIQARILCgdMRUFSTkVSEAISEwoPTk9OX1BB",
            "UlRJQ0lQQU5UEAMiQAoKTWVtYmVyVHlwZRIYChNVTktOT1dOX01FTUJFUl9U",
            "WVBFEOcHEg0KCU5PTl9WT1RFUhAAEgkKBVZPVEVSEAEiigEKDFJhZnRDb25m",
            "aWdQQhISCgpvcGlkX2luZGV4GAEgASgDEhYKDk9CU09MRVRFX2xvY2FsGAIg",
            "ASgIEiMKFHVuc2FmZV9jb25maWdfY2hhbmdlGAQgASgIOgVmYWxzZRIpCgVw",
            "ZWVycxgDIAMoCzIaLmt1ZHUuY29uc2Vuc3VzLlJhZnRQZWVyUEIiqwEKEENv",
            "bnNlbnN1c1N0YXRlUEISFAoMY3VycmVudF90ZXJtGAEgAigDEhMKC2xlYWRl",
            "cl91dWlkGAIgASgJEjYKEGNvbW1pdHRlZF9jb25maWcYAyACKAsyHC5rdWR1",
            "LmNvbnNlbnN1cy5SYWZ0Q29uZmlnUEISNAoOcGVuZGluZ19jb25maWcYBCAB",
            "KAsyHC5rdWR1LmNvbnNlbnN1cy5SYWZ0Q29uZmlnUEIidgoTQ29uc2Vuc3Vz",
            "TWV0YWRhdGFQQhI2ChBjb21taXR0ZWRfY29uZmlnGAEgAigLMhwua3VkdS5j",
            "b25zZW5zdXMuUmFmdENvbmZpZ1BCEhQKDGN1cnJlbnRfdGVybRgCIAIoAxIR",
            "Cgl2b3RlZF9mb3IYAyABKAlCQQoZb3JnLmFwYWNoZS5rdWR1LmNvbnNlbnN1",
            "c6oCI0tuZXQuS3VkdS5DbGllbnQuUHJvdG9idWYuQ29uc2Vuc3Vz"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB), global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB.Parser, new[]{ "Promote", "Replace" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB), global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Parser, new[]{ "OverallHealth" }, null, new[]{ typeof(global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB), global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Parser, new[]{ "PermanentUuid", "MemberType", "LastKnownAddr", "Attrs", "HealthReport" }, null, new[]{ typeof(global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.Role), typeof(global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB), global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB.Parser, new[]{ "OpidIndex", "OBSOLETELocal", "UnsafeConfigChange", "Peers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.ConsensusStatePB), global::Knet.Kudu.Client.Protobuf.Consensus.ConsensusStatePB.Parser, new[]{ "CurrentTerm", "LeaderUuid", "CommittedConfig", "PendingConfig" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Consensus.ConsensusMetadataPB), global::Knet.Kudu.Client.Protobuf.Consensus.ConsensusMetadataPB.Parser, new[]{ "CommittedConfig", "CurrentTerm", "VotedFor" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Per-replica attributes.
  /// </summary>
  public sealed partial class RaftPeerAttrsPB : pb::IMessage<RaftPeerAttrsPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<RaftPeerAttrsPB> _parser = new pb::MessageParser<RaftPeerAttrsPB>(() => new RaftPeerAttrsPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RaftPeerAttrsPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerAttrsPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerAttrsPB(RaftPeerAttrsPB other) : this() {
      _hasBits0 = other._hasBits0;
      promote_ = other.promote_;
      replace_ = other.replace_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerAttrsPB Clone() {
      return new RaftPeerAttrsPB(this);
    }

    /// <summary>Field number for the "promote" field.</summary>
    public const int PromoteFieldNumber = 1;
    private readonly static bool PromoteDefaultValue = false;

    private bool promote_;
    /// <summary>
    /// Whether to promote a replica when it has caught up with the leader,
    /// changing its membership type from NON_VOTER to VOTER. This field is
    /// applicable only for NON_VOTER replicas.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Promote {
      get { if ((_hasBits0 & 1) != 0) { return promote_; } else { return PromoteDefaultValue; } }
      set {
        _hasBits0 |= 1;
        promote_ = value;
      }
    }
    /// <summary>Gets whether the "promote" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPromote {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "promote" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPromote() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "replace" field.</summary>
    public const int ReplaceFieldNumber = 2;
    private readonly static bool ReplaceDefaultValue = false;

    private bool replace_;
    /// <summary>
    /// If set to 'true', the replica needs to be replaced regardless of
    /// its health report.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Replace {
      get { if ((_hasBits0 & 2) != 0) { return replace_; } else { return ReplaceDefaultValue; } }
      set {
        _hasBits0 |= 2;
        replace_ = value;
      }
    }
    /// <summary>Gets whether the "replace" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasReplace {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "replace" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearReplace() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RaftPeerAttrsPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RaftPeerAttrsPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Promote != other.Promote) return false;
      if (Replace != other.Replace) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPromote) hash ^= Promote.GetHashCode();
      if (HasReplace) hash ^= Replace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPromote) {
        output.WriteRawTag(8);
        output.WriteBool(Promote);
      }
      if (HasReplace) {
        output.WriteRawTag(16);
        output.WriteBool(Replace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPromote) {
        size += 1 + 1;
      }
      if (HasReplace) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RaftPeerAttrsPB other) {
      if (other == null) {
        return;
      }
      if (other.HasPromote) {
        Promote = other.Promote;
      }
      if (other.HasReplace) {
        Replace = other.Replace;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Promote = input.ReadBool();
            break;
          }
          case 16: {
            Replace = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Report on a replica's (peer's) health.
  /// </summary>
  public sealed partial class HealthReportPB : pb::IMessage<HealthReportPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<HealthReportPB> _parser = new pb::MessageParser<HealthReportPB>(() => new HealthReportPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HealthReportPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthReportPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthReportPB(HealthReportPB other) : this() {
      _hasBits0 = other._hasBits0;
      overallHealth_ = other.overallHealth_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HealthReportPB Clone() {
      return new HealthReportPB(this);
    }

    /// <summary>Field number for the "overall_health" field.</summary>
    public const int OverallHealthFieldNumber = 1;
    private readonly static global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus OverallHealthDefaultValue = global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus.Unknown;

    private global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus overallHealth_;
    /// <summary>
    /// Overall health status of a replica. Reflects at least the responsiveness
    /// (i.e. time of last contact) and the lag of the replica's WAL
    /// behind the leader's.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus OverallHealth {
      get { if ((_hasBits0 & 1) != 0) { return overallHealth_; } else { return OverallHealthDefaultValue; } }
      set {
        _hasBits0 |= 1;
        overallHealth_ = value;
      }
    }
    /// <summary>Gets whether the "overall_health" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOverallHealth {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "overall_health" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOverallHealth() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HealthReportPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HealthReportPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OverallHealth != other.OverallHealth) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOverallHealth) hash ^= OverallHealth.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOverallHealth) {
        output.WriteRawTag(8);
        output.WriteEnum((int) OverallHealth);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOverallHealth) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OverallHealth);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HealthReportPB other) {
      if (other == null) {
        return;
      }
      if (other.HasOverallHealth) {
        OverallHealth = other.OverallHealth;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OverallHealth = (global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB.Types.HealthStatus) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HealthReportPB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// HealthStatus respresents a fully-connected state machine, where
      /// transitions between any of the states are allowed.
      /// </summary>
      public enum HealthStatus {
        /// <summary>
        /// No information on the health status.
        /// </summary>
        [pbr::OriginalName("UNKNOWN")] Unknown = 999,
        /// <summary>
        /// Replica has failed and needs replacement. The failure might be a
        /// transient one, so replica may return to a healthy state soon.
        /// </summary>
        [pbr::OriginalName("FAILED")] Failed = 0,
        /// <summary>
        /// Replica is functioning properly.
        /// </summary>
        [pbr::OriginalName("HEALTHY")] Healthy = 1,
        /// <summary>
        /// Replica has failed in an irreversible and unrecoverable way and needs
        /// replacement. The failure is permanent and the replica definitely cannot
        /// return to a healthy state.
        /// </summary>
        [pbr::OriginalName("FAILED_UNRECOVERABLE")] FailedUnrecoverable = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// A peer in a configuration.
  /// </summary>
  public sealed partial class RaftPeerPB : pb::IMessage<RaftPeerPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<RaftPeerPB> _parser = new pb::MessageParser<RaftPeerPB>(() => new RaftPeerPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RaftPeerPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerPB(RaftPeerPB other) : this() {
      _hasBits0 = other._hasBits0;
      permanentUuid_ = other.permanentUuid_;
      memberType_ = other.memberType_;
      lastKnownAddr_ = other.lastKnownAddr_ != null ? other.lastKnownAddr_.Clone() : null;
      attrs_ = other.attrs_ != null ? other.attrs_.Clone() : null;
      healthReport_ = other.healthReport_ != null ? other.healthReport_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftPeerPB Clone() {
      return new RaftPeerPB(this);
    }

    /// <summary>Field number for the "permanent_uuid" field.</summary>
    public const int PermanentUuidFieldNumber = 1;
    private readonly static pb::ByteString PermanentUuidDefaultValue = pb::ByteString.Empty;

    private pb::ByteString permanentUuid_;
    /// <summary>
    /// Permanent uuid is optional: RaftPeerPB/RaftConfigPB instances may
    /// be created before the permanent uuid is known (e.g., when
    /// manually specifying a configuration for Master/CatalogManager);
    /// permanent uuid can be retrieved at a later time through RPC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString PermanentUuid {
      get { return permanentUuid_ ?? PermanentUuidDefaultValue; }
      set {
        permanentUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "permanent_uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPermanentUuid {
      get { return permanentUuid_ != null; }
    }
    /// <summary>Clears the value of the "permanent_uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPermanentUuid() {
      permanentUuid_ = null;
    }

    /// <summary>Field number for the "member_type" field.</summary>
    public const int MemberTypeFieldNumber = 2;
    private readonly static global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType MemberTypeDefaultValue = global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType.UnknownMemberType;

    private global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType memberType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType MemberType {
      get { if ((_hasBits0 & 1) != 0) { return memberType_; } else { return MemberTypeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        memberType_ = value;
      }
    }
    /// <summary>Gets whether the "member_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMemberType {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "member_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMemberType() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "last_known_addr" field.</summary>
    public const int LastKnownAddrFieldNumber = 3;
    private global::Knet.Kudu.Client.Protobuf.HostPortPB lastKnownAddr_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.HostPortPB LastKnownAddr {
      get { return lastKnownAddr_; }
      set {
        lastKnownAddr_ = value;
      }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB attrs_;
    /// <summary>
    /// Replica attributes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB Attrs {
      get { return attrs_; }
      set {
        attrs_ = value;
      }
    }

    /// <summary>Field number for the "health_report" field.</summary>
    public const int HealthReportFieldNumber = 5;
    private global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB healthReport_;
    /// <summary>
    /// Replica's health report, as seen by the leader. This is a run-time
    /// only field, it should not be persisted or read from the persistent storage.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB HealthReport {
      get { return healthReport_; }
      set {
        healthReport_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RaftPeerPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RaftPeerPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PermanentUuid != other.PermanentUuid) return false;
      if (MemberType != other.MemberType) return false;
      if (!object.Equals(LastKnownAddr, other.LastKnownAddr)) return false;
      if (!object.Equals(Attrs, other.Attrs)) return false;
      if (!object.Equals(HealthReport, other.HealthReport)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasPermanentUuid) hash ^= PermanentUuid.GetHashCode();
      if (HasMemberType) hash ^= MemberType.GetHashCode();
      if (lastKnownAddr_ != null) hash ^= LastKnownAddr.GetHashCode();
      if (attrs_ != null) hash ^= Attrs.GetHashCode();
      if (healthReport_ != null) hash ^= HealthReport.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasPermanentUuid) {
        output.WriteRawTag(10);
        output.WriteBytes(PermanentUuid);
      }
      if (HasMemberType) {
        output.WriteRawTag(16);
        output.WriteEnum((int) MemberType);
      }
      if (lastKnownAddr_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LastKnownAddr);
      }
      if (attrs_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Attrs);
      }
      if (healthReport_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(HealthReport);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasPermanentUuid) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(PermanentUuid);
      }
      if (HasMemberType) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MemberType);
      }
      if (lastKnownAddr_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LastKnownAddr);
      }
      if (attrs_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Attrs);
      }
      if (healthReport_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HealthReport);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RaftPeerPB other) {
      if (other == null) {
        return;
      }
      if (other.HasPermanentUuid) {
        PermanentUuid = other.PermanentUuid;
      }
      if (other.HasMemberType) {
        MemberType = other.MemberType;
      }
      if (other.lastKnownAddr_ != null) {
        if (lastKnownAddr_ == null) {
          LastKnownAddr = new global::Knet.Kudu.Client.Protobuf.HostPortPB();
        }
        LastKnownAddr.MergeFrom(other.LastKnownAddr);
      }
      if (other.attrs_ != null) {
        if (attrs_ == null) {
          Attrs = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB();
        }
        Attrs.MergeFrom(other.Attrs);
      }
      if (other.healthReport_ != null) {
        if (healthReport_ == null) {
          HealthReport = new global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB();
        }
        HealthReport.MergeFrom(other.HealthReport);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            PermanentUuid = input.ReadBytes();
            break;
          }
          case 16: {
            MemberType = (global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Types.MemberType) input.ReadEnum();
            break;
          }
          case 26: {
            if (lastKnownAddr_ == null) {
              LastKnownAddr = new global::Knet.Kudu.Client.Protobuf.HostPortPB();
            }
            input.ReadMessage(LastKnownAddr);
            break;
          }
          case 34: {
            if (attrs_ == null) {
              Attrs = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerAttrsPB();
            }
            input.ReadMessage(Attrs);
            break;
          }
          case 42: {
            if (healthReport_ == null) {
              HealthReport = new global::Knet.Kudu.Client.Protobuf.Consensus.HealthReportPB();
            }
            input.ReadMessage(HealthReport);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RaftPeerPB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      /// <summary>
      /// The possible roles for peers.
      /// </summary>
      public enum Role {
        [pbr::OriginalName("UNKNOWN_ROLE")] UnknownRole = 999,
        /// <summary>
        /// Indicates this node is a follower in the configuration, i.e. that it participates
        /// in majorities and accepts Consensus::Update() calls.
        /// </summary>
        [pbr::OriginalName("FOLLOWER")] Follower = 0,
        /// <summary>
        /// Indicates this node is the current leader of the configuration, i.e. that it
        /// participates in majorities and accepts Consensus::Append() calls.
        /// </summary>
        [pbr::OriginalName("LEADER")] Leader = 1,
        /// <summary>
        /// Indicates that this node participates in the configuration in a passive role,
        /// i.e. that it accepts Consensus::Update() calls but does not participate
        /// in elections or majorities.
        /// </summary>
        [pbr::OriginalName("LEARNER")] Learner = 2,
        /// <summary>
        /// Indicates that this node is not a participant of the configuration, i.e. does
        /// not accept Consensus::Update() or Consensus::Update() and cannot
        /// participate in elections or majorities. This is usually the role of a node
        /// that leaves the configuration.
        /// </summary>
        [pbr::OriginalName("NON_PARTICIPANT")] NonParticipant = 3,
      }

      public enum MemberType {
        [pbr::OriginalName("UNKNOWN_MEMBER_TYPE")] UnknownMemberType = 999,
        [pbr::OriginalName("NON_VOTER")] NonVoter = 0,
        [pbr::OriginalName("VOTER")] Voter = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// A set of peers, serving a single tablet.
  /// </summary>
  public sealed partial class RaftConfigPB : pb::IMessage<RaftConfigPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<RaftConfigPB> _parser = new pb::MessageParser<RaftConfigPB>(() => new RaftConfigPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RaftConfigPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftConfigPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftConfigPB(RaftConfigPB other) : this() {
      _hasBits0 = other._hasBits0;
      opidIndex_ = other.opidIndex_;
      oBSOLETELocal_ = other.oBSOLETELocal_;
      unsafeConfigChange_ = other.unsafeConfigChange_;
      peers_ = other.peers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RaftConfigPB Clone() {
      return new RaftConfigPB(this);
    }

    /// <summary>Field number for the "opid_index" field.</summary>
    public const int OpidIndexFieldNumber = 1;
    private readonly static long OpidIndexDefaultValue = 0L;

    private long opidIndex_;
    /// <summary>
    /// The index of the operation which serialized this RaftConfigPB through
    /// consensus. It is set when the operation is consensus-committed (replicated
    /// to a majority of voters) and before the consensus metadata is updated.
    /// It is left undefined if the operation isn't committed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long OpidIndex {
      get { if ((_hasBits0 & 1) != 0) { return opidIndex_; } else { return OpidIndexDefaultValue; } }
      set {
        _hasBits0 |= 1;
        opidIndex_ = value;
      }
    }
    /// <summary>Gets whether the "opid_index" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOpidIndex {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "opid_index" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOpidIndex() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "OBSOLETE_local" field.</summary>
    public const int OBSOLETELocalFieldNumber = 2;
    private readonly static bool OBSOLETELocalDefaultValue = false;

    private bool oBSOLETELocal_;
    /// <summary>
    /// Obsolete. This parameter has been retired.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool OBSOLETELocal {
      get { if ((_hasBits0 & 2) != 0) { return oBSOLETELocal_; } else { return OBSOLETELocalDefaultValue; } }
      set {
        _hasBits0 |= 2;
        oBSOLETELocal_ = value;
      }
    }
    /// <summary>Gets whether the "OBSOLETE_local" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOBSOLETELocal {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "OBSOLETE_local" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOBSOLETELocal() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "unsafe_config_change" field.</summary>
    public const int UnsafeConfigChangeFieldNumber = 4;
    private readonly static bool UnsafeConfigChangeDefaultValue = false;

    private bool unsafeConfigChange_;
    /// <summary>
    /// Flag to allow unsafe config change operations.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UnsafeConfigChange {
      get { if ((_hasBits0 & 4) != 0) { return unsafeConfigChange_; } else { return UnsafeConfigChangeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        unsafeConfigChange_ = value;
      }
    }
    /// <summary>Gets whether the "unsafe_config_change" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUnsafeConfigChange {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "unsafe_config_change" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUnsafeConfigChange() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "peers" field.</summary>
    public const int PeersFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB> _repeated_peers_codec
        = pb::FieldCodec.ForMessage(26, global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB> peers_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB>();
    /// <summary>
    /// The set of peers in the configuration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Consensus.RaftPeerPB> Peers {
      get { return peers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RaftConfigPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RaftConfigPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OpidIndex != other.OpidIndex) return false;
      if (OBSOLETELocal != other.OBSOLETELocal) return false;
      if (UnsafeConfigChange != other.UnsafeConfigChange) return false;
      if(!peers_.Equals(other.peers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOpidIndex) hash ^= OpidIndex.GetHashCode();
      if (HasOBSOLETELocal) hash ^= OBSOLETELocal.GetHashCode();
      if (HasUnsafeConfigChange) hash ^= UnsafeConfigChange.GetHashCode();
      hash ^= peers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOpidIndex) {
        output.WriteRawTag(8);
        output.WriteInt64(OpidIndex);
      }
      if (HasOBSOLETELocal) {
        output.WriteRawTag(16);
        output.WriteBool(OBSOLETELocal);
      }
      peers_.WriteTo(ref output, _repeated_peers_codec);
      if (HasUnsafeConfigChange) {
        output.WriteRawTag(32);
        output.WriteBool(UnsafeConfigChange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOpidIndex) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(OpidIndex);
      }
      if (HasOBSOLETELocal) {
        size += 1 + 1;
      }
      if (HasUnsafeConfigChange) {
        size += 1 + 1;
      }
      size += peers_.CalculateSize(_repeated_peers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RaftConfigPB other) {
      if (other == null) {
        return;
      }
      if (other.HasOpidIndex) {
        OpidIndex = other.OpidIndex;
      }
      if (other.HasOBSOLETELocal) {
        OBSOLETELocal = other.OBSOLETELocal;
      }
      if (other.HasUnsafeConfigChange) {
        UnsafeConfigChange = other.UnsafeConfigChange;
      }
      peers_.Add(other.peers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OpidIndex = input.ReadInt64();
            break;
          }
          case 16: {
            OBSOLETELocal = input.ReadBool();
            break;
          }
          case 26: {
            peers_.AddEntriesFrom(ref input, _repeated_peers_codec);
            break;
          }
          case 32: {
            UnsafeConfigChange = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Represents a snapshot of a configuration at a given moment in time.
  /// </summary>
  public sealed partial class ConsensusStatePB : pb::IMessage<ConsensusStatePB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ConsensusStatePB> _parser = new pb::MessageParser<ConsensusStatePB>(() => new ConsensusStatePB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConsensusStatePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusStatePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusStatePB(ConsensusStatePB other) : this() {
      _hasBits0 = other._hasBits0;
      currentTerm_ = other.currentTerm_;
      leaderUuid_ = other.leaderUuid_;
      committedConfig_ = other.committedConfig_ != null ? other.committedConfig_.Clone() : null;
      pendingConfig_ = other.pendingConfig_ != null ? other.pendingConfig_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusStatePB Clone() {
      return new ConsensusStatePB(this);
    }

    /// <summary>Field number for the "current_term" field.</summary>
    public const int CurrentTermFieldNumber = 1;
    private readonly static long CurrentTermDefaultValue = 0L;

    private long currentTerm_;
    /// <summary>
    /// A configuration is always guaranteed to have a known term.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentTerm {
      get { if ((_hasBits0 & 1) != 0) { return currentTerm_; } else { return CurrentTermDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currentTerm_ = value;
      }
    }
    /// <summary>Gets whether the "current_term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentTerm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "current_term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentTerm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "leader_uuid" field.</summary>
    public const int LeaderUuidFieldNumber = 2;
    private readonly static string LeaderUuidDefaultValue = "";

    private string leaderUuid_;
    /// <summary>
    /// There may not always be a leader of a configuration at any given time.
    ///
    /// The node that the local peer considers to be leader changes based on rules
    /// defined in the Raft specification. Roughly, this corresponds either to
    /// being elected leader (in the case that the local peer is the leader), or
    /// when an update is accepted from another node, which basically just amounts
    /// to a term check on the UpdateConsensus() RPC request.
    ///
    /// Whenever the local peer sees a new term, the leader flag is cleared until
    /// a new leader is acknowledged based on the above criteria. Simply casting a
    /// vote for a peer is not sufficient to assume that the peer has won the
    /// election, so we do not update this field based on our vote.
    ///
    /// The leader may be a part of the committed or the pending configuration (or both).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LeaderUuid {
      get { return leaderUuid_ ?? LeaderUuidDefaultValue; }
      set {
        leaderUuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "leader_uuid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLeaderUuid {
      get { return leaderUuid_ != null; }
    }
    /// <summary>Clears the value of the "leader_uuid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLeaderUuid() {
      leaderUuid_ = null;
    }

    /// <summary>Field number for the "committed_config" field.</summary>
    public const int CommittedConfigFieldNumber = 3;
    private global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB committedConfig_;
    /// <summary>
    /// The committed peers. Initial peership is set on tablet start, so this
    /// field should always be present.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB CommittedConfig {
      get { return committedConfig_; }
      set {
        committedConfig_ = value;
      }
    }

    /// <summary>Field number for the "pending_config" field.</summary>
    public const int PendingConfigFieldNumber = 4;
    private global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB pendingConfig_;
    /// <summary>
    /// The peers in the pending configuration, if there is one.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB PendingConfig {
      get { return pendingConfig_; }
      set {
        pendingConfig_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConsensusStatePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConsensusStatePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentTerm != other.CurrentTerm) return false;
      if (LeaderUuid != other.LeaderUuid) return false;
      if (!object.Equals(CommittedConfig, other.CommittedConfig)) return false;
      if (!object.Equals(PendingConfig, other.PendingConfig)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasCurrentTerm) hash ^= CurrentTerm.GetHashCode();
      if (HasLeaderUuid) hash ^= LeaderUuid.GetHashCode();
      if (committedConfig_ != null) hash ^= CommittedConfig.GetHashCode();
      if (pendingConfig_ != null) hash ^= PendingConfig.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasCurrentTerm) {
        output.WriteRawTag(8);
        output.WriteInt64(CurrentTerm);
      }
      if (HasLeaderUuid) {
        output.WriteRawTag(18);
        output.WriteString(LeaderUuid);
      }
      if (committedConfig_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(CommittedConfig);
      }
      if (pendingConfig_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(PendingConfig);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasCurrentTerm) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTerm);
      }
      if (HasLeaderUuid) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderUuid);
      }
      if (committedConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommittedConfig);
      }
      if (pendingConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PendingConfig);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConsensusStatePB other) {
      if (other == null) {
        return;
      }
      if (other.HasCurrentTerm) {
        CurrentTerm = other.CurrentTerm;
      }
      if (other.HasLeaderUuid) {
        LeaderUuid = other.LeaderUuid;
      }
      if (other.committedConfig_ != null) {
        if (committedConfig_ == null) {
          CommittedConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
        }
        CommittedConfig.MergeFrom(other.CommittedConfig);
      }
      if (other.pendingConfig_ != null) {
        if (pendingConfig_ == null) {
          PendingConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
        }
        PendingConfig.MergeFrom(other.PendingConfig);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            CurrentTerm = input.ReadInt64();
            break;
          }
          case 18: {
            LeaderUuid = input.ReadString();
            break;
          }
          case 26: {
            if (committedConfig_ == null) {
              CommittedConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
            }
            input.ReadMessage(CommittedConfig);
            break;
          }
          case 34: {
            if (pendingConfig_ == null) {
              PendingConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
            }
            input.ReadMessage(PendingConfig);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// This PB is used to serialize all of the persistent state needed for
  /// Consensus that is not in the WAL, such as leader election and
  /// communication on startup.
  /// </summary>
  public sealed partial class ConsensusMetadataPB : pb::IMessage<ConsensusMetadataPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ConsensusMetadataPB> _parser = new pb::MessageParser<ConsensusMetadataPB>(() => new ConsensusMetadataPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ConsensusMetadataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Consensus.MetadataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusMetadataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusMetadataPB(ConsensusMetadataPB other) : this() {
      _hasBits0 = other._hasBits0;
      committedConfig_ = other.committedConfig_ != null ? other.committedConfig_.Clone() : null;
      currentTerm_ = other.currentTerm_;
      votedFor_ = other.votedFor_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ConsensusMetadataPB Clone() {
      return new ConsensusMetadataPB(this);
    }

    /// <summary>Field number for the "committed_config" field.</summary>
    public const int CommittedConfigFieldNumber = 1;
    private global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB committedConfig_;
    /// <summary>
    /// Last-committed peership.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB CommittedConfig {
      get { return committedConfig_; }
      set {
        committedConfig_ = value;
      }
    }

    /// <summary>Field number for the "current_term" field.</summary>
    public const int CurrentTermFieldNumber = 2;
    private readonly static long CurrentTermDefaultValue = 0L;

    private long currentTerm_;
    /// <summary>
    /// Latest term this server has seen.
    /// When a configuration is first created, initialized to 0.
    ///
    /// Whenever a new election is started, the candidate increments this by one
    /// and requests votes from peers.
    ///
    /// If any RPC request or response is received from another node containing a term higher
    /// than this one, the server should step down to FOLLOWER and set its current_term to
    /// match the caller's term.
    ///
    /// If a follower receives an UpdateConsensus RPC with a term lower than this
    /// term, then that implies that the RPC is coming from a former LEADER who has
    /// not realized yet that its term is over. In that case, we will reject the
    /// UpdateConsensus() call with ConsensusErrorPB::INVALID_TERM.
    ///
    /// If a follower receives a RequestConsensusVote() RPC with an earlier term,
    /// the vote is denied.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CurrentTerm {
      get { if ((_hasBits0 & 1) != 0) { return currentTerm_; } else { return CurrentTermDefaultValue; } }
      set {
        _hasBits0 |= 1;
        currentTerm_ = value;
      }
    }
    /// <summary>Gets whether the "current_term" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCurrentTerm {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "current_term" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCurrentTerm() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "voted_for" field.</summary>
    public const int VotedForFieldNumber = 3;
    private readonly static string VotedForDefaultValue = "";

    private string votedFor_;
    /// <summary>
    /// Permanent UUID of the candidate voted for in 'current_term', or not present
    /// if no vote was made in the current term.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string VotedFor {
      get { return votedFor_ ?? VotedForDefaultValue; }
      set {
        votedFor_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "voted_for" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasVotedFor {
      get { return votedFor_ != null; }
    }
    /// <summary>Clears the value of the "voted_for" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearVotedFor() {
      votedFor_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ConsensusMetadataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ConsensusMetadataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(CommittedConfig, other.CommittedConfig)) return false;
      if (CurrentTerm != other.CurrentTerm) return false;
      if (VotedFor != other.VotedFor) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (committedConfig_ != null) hash ^= CommittedConfig.GetHashCode();
      if (HasCurrentTerm) hash ^= CurrentTerm.GetHashCode();
      if (HasVotedFor) hash ^= VotedFor.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (committedConfig_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CommittedConfig);
      }
      if (HasCurrentTerm) {
        output.WriteRawTag(16);
        output.WriteInt64(CurrentTerm);
      }
      if (HasVotedFor) {
        output.WriteRawTag(26);
        output.WriteString(VotedFor);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (committedConfig_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CommittedConfig);
      }
      if (HasCurrentTerm) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTerm);
      }
      if (HasVotedFor) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VotedFor);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ConsensusMetadataPB other) {
      if (other == null) {
        return;
      }
      if (other.committedConfig_ != null) {
        if (committedConfig_ == null) {
          CommittedConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
        }
        CommittedConfig.MergeFrom(other.CommittedConfig);
      }
      if (other.HasCurrentTerm) {
        CurrentTerm = other.CurrentTerm;
      }
      if (other.HasVotedFor) {
        VotedFor = other.VotedFor;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (committedConfig_ == null) {
              CommittedConfig = new global::Knet.Kudu.Client.Protobuf.Consensus.RaftConfigPB();
            }
            input.ReadMessage(CommittedConfig);
            break;
          }
          case 16: {
            CurrentTerm = input.ReadInt64();
            break;
          }
          case 26: {
            VotedFor = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
