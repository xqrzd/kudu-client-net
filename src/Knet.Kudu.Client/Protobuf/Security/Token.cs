// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kudu/security/token.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Knet.Kudu.Client.Protobuf.Security {

  /// <summary>Holder for reflection information generated from kudu/security/token.proto</summary>
  public static partial class TokenReflection {

    #region Descriptor
    /// <summary>File descriptor for kudu/security/token.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TokenReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlrdWR1L3NlY3VyaXR5L3Rva2VuLnByb3RvEg1rdWR1LnNlY3VyaXR5Ghdr",
            "dWR1L3V0aWwvcGJfdXRpbC5wcm90byIrChFDb2x1bW5Qcml2aWxlZ2VQQhIW",
            "Cg5zY2FuX3ByaXZpbGVnZRgBIAEoCCK3AgoQVGFibGVQcml2aWxlZ2VQQhIQ",
            "Cgh0YWJsZV9pZBgBIAEoCRIWCg5zY2FuX3ByaXZpbGVnZRgCIAEoCBIYChBp",
            "bnNlcnRfcHJpdmlsZWdlGAMgASgIEhgKEHVwZGF0ZV9wcml2aWxlZ2UYBCAB",
            "KAgSGAoQZGVsZXRlX3ByaXZpbGVnZRgFIAEoCBJQChFjb2x1bW5fcHJpdmls",
            "ZWdlcxgGIAMoCzI1Lmt1ZHUuc2VjdXJpdHkuVGFibGVQcml2aWxlZ2VQQi5D",
            "b2x1bW5Qcml2aWxlZ2VzRW50cnkaWQoVQ29sdW1uUHJpdmlsZWdlc0VudHJ5",
            "EgsKA2tleRgBIAEoBRIvCgV2YWx1ZRgCIAEoCzIgLmt1ZHUuc2VjdXJpdHku",
            "Q29sdW1uUHJpdmlsZWdlUEI6AjgBIiAKDEF1dGhuVG9rZW5QQhIQCgh1c2Vy",
            "bmFtZRgBIAEoCSJaCgxBdXRoelRva2VuUEISEAoIdXNlcm5hbWUYASABKAkS",
            "OAoPdGFibGVfcHJpdmlsZWdlGAIgASgLMh8ua3VkdS5zZWN1cml0eS5UYWJs",
            "ZVByaXZpbGVnZVBCItQBCgdUb2tlblBCEiEKGWV4cGlyZV91bml4X2Vwb2No",
            "X3NlY29uZHMYASABKAMSHQoVaW5jb21wYXRpYmxlX2ZlYXR1cmVzGAIgAygF",
            "EiwKBWF1dGhuGAMgASgLMhsua3VkdS5zZWN1cml0eS5BdXRoblRva2VuUEJI",
            "ABIsCgVhdXRoehgEIAEoCzIbLmt1ZHUuc2VjdXJpdHkuQXV0aHpUb2tlblBC",
            "SAAiIgoHRmVhdHVyZRIXChJVTlVTRURfUExBQ0VIT0xERVIQ5wdCBwoFdG9r",
            "ZW4iWQoNU2lnbmVkVG9rZW5QQhISCgp0b2tlbl9kYXRhGAEgASgMEhcKCXNp",
            "Z25hdHVyZRgCIAEoDEIEiLUYARIbChNzaWduaW5nX2tleV9zZXFfbnVtGAMg",
            "ASgDIm0KGFRva2VuU2lnbmluZ1ByaXZhdGVLZXlQQhITCgtrZXlfc2VxX251",
            "bRgBIAEoAxIZCgtyc2Ffa2V5X2RlchgCIAEoDEIEiLUYARIhChlleHBpcmVf",
            "dW5peF9lcG9jaF9zZWNvbmRzGAMgASgDImYKF1Rva2VuU2lnbmluZ1B1Ymxp",
            "Y0tleVBCEhMKC2tleV9zZXFfbnVtGAEgASgDEhMKC3JzYV9rZXlfZGVyGAIg",
            "ASgMEiEKGWV4cGlyZV91bml4X2Vwb2NoX3NlY29uZHMYAyABKANCPwoYb3Jn",
            "LmFwYWNoZS5rdWR1LnNlY3VyaXR5qgIiS25ldC5LdWR1LkNsaWVudC5Qcm90",
            "b2J1Zi5TZWN1cml0eQ=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Knet.Kudu.Client.Protobuf.PbUtilReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB), global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB.Parser, new[]{ "ScanPrivilege" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB), global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB.Parser, new[]{ "TableId", "ScanPrivilege", "InsertPrivilege", "UpdatePrivilege", "DeletePrivilege", "ColumnPrivileges" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB), global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB.Parser, new[]{ "Username" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB), global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB.Parser, new[]{ "Username", "TablePrivilege" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.TokenPB), global::Knet.Kudu.Client.Protobuf.Security.TokenPB.Parser, new[]{ "ExpireUnixEpochSeconds", "IncompatibleFeatures", "Authn", "Authz" }, new[]{ "Token" }, new[]{ typeof(global::Knet.Kudu.Client.Protobuf.Security.TokenPB.Types.Feature) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.SignedTokenPB), global::Knet.Kudu.Client.Protobuf.Security.SignedTokenPB.Parser, new[]{ "TokenData", "Signature", "SigningKeySeqNum" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.TokenSigningPrivateKeyPB), global::Knet.Kudu.Client.Protobuf.Security.TokenSigningPrivateKeyPB.Parser, new[]{ "KeySeqNum", "RsaKeyDer", "ExpireUnixEpochSeconds" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Security.TokenSigningPublicKeyPB), global::Knet.Kudu.Client.Protobuf.Security.TokenSigningPublicKeyPB.Parser, new[]{ "KeySeqNum", "RsaKeyDer", "ExpireUnixEpochSeconds" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ColumnPrivilegePB : pb::IMessage<ColumnPrivilegePB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnPrivilegePB> _parser = new pb::MessageParser<ColumnPrivilegePB>(() => new ColumnPrivilegePB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColumnPrivilegePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnPrivilegePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnPrivilegePB(ColumnPrivilegePB other) : this() {
      _hasBits0 = other._hasBits0;
      scanPrivilege_ = other.scanPrivilege_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnPrivilegePB Clone() {
      return new ColumnPrivilegePB(this);
    }

    /// <summary>Field number for the "scan_privilege" field.</summary>
    public const int ScanPrivilegeFieldNumber = 1;
    private readonly static bool ScanPrivilegeDefaultValue = false;

    private bool scanPrivilege_;
    /// <summary>
    /// If set, the user has privileges to select and apply predicates on the
    /// column during scans.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ScanPrivilege {
      get { if ((_hasBits0 & 1) != 0) { return scanPrivilege_; } else { return ScanPrivilegeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scanPrivilege_ = value;
      }
    }
    /// <summary>Gets whether the "scan_privilege" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScanPrivilege {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scan_privilege" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScanPrivilege() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColumnPrivilegePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColumnPrivilegePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ScanPrivilege != other.ScanPrivilege) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasScanPrivilege) hash ^= ScanPrivilege.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasScanPrivilege) {
        output.WriteRawTag(8);
        output.WriteBool(ScanPrivilege);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasScanPrivilege) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColumnPrivilegePB other) {
      if (other == null) {
        return;
      }
      if (other.HasScanPrivilege) {
        ScanPrivilege = other.ScanPrivilege;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ScanPrivilege = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TablePrivilegePB : pb::IMessage<TablePrivilegePB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TablePrivilegePB> _parser = new pb::MessageParser<TablePrivilegePB>(() => new TablePrivilegePB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TablePrivilegePB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TablePrivilegePB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TablePrivilegePB(TablePrivilegePB other) : this() {
      _hasBits0 = other._hasBits0;
      tableId_ = other.tableId_;
      scanPrivilege_ = other.scanPrivilege_;
      insertPrivilege_ = other.insertPrivilege_;
      updatePrivilege_ = other.updatePrivilege_;
      deletePrivilege_ = other.deletePrivilege_;
      columnPrivileges_ = other.columnPrivileges_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TablePrivilegePB Clone() {
      return new TablePrivilegePB(this);
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 1;
    private readonly static string TableIdDefaultValue = "";

    private string tableId_;
    /// <summary>
    /// The ID of the table to which the privileges apply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableId {
      get { return tableId_ ?? TableIdDefaultValue; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "table_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableId {
      get { return tableId_ != null; }
    }
    /// <summary>Clears the value of the "table_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableId() {
      tableId_ = null;
    }

    /// <summary>Field number for the "scan_privilege" field.</summary>
    public const int ScanPrivilegeFieldNumber = 2;
    private readonly static bool ScanPrivilegeDefaultValue = false;

    private bool scanPrivilege_;
    /// <summary>
    /// If set, the user is authorized to select and apply predicates to all
    /// columns when scanning the table, and `column_privileges` is ignored. If
    /// unset, the user may only scan and apply predicates to columns with the
    /// privileges specified in `column_privileges`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool ScanPrivilege {
      get { if ((_hasBits0 & 1) != 0) { return scanPrivilege_; } else { return ScanPrivilegeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        scanPrivilege_ = value;
      }
    }
    /// <summary>Gets whether the "scan_privilege" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasScanPrivilege {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "scan_privilege" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearScanPrivilege() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "insert_privilege" field.</summary>
    public const int InsertPrivilegeFieldNumber = 3;
    private readonly static bool InsertPrivilegeDefaultValue = false;

    private bool insertPrivilege_;
    /// <summary>
    /// If set, the user is authorized to insert rows into the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InsertPrivilege {
      get { if ((_hasBits0 & 2) != 0) { return insertPrivilege_; } else { return InsertPrivilegeDefaultValue; } }
      set {
        _hasBits0 |= 2;
        insertPrivilege_ = value;
      }
    }
    /// <summary>Gets whether the "insert_privilege" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInsertPrivilege {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "insert_privilege" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInsertPrivilege() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "update_privilege" field.</summary>
    public const int UpdatePrivilegeFieldNumber = 4;
    private readonly static bool UpdatePrivilegeDefaultValue = false;

    private bool updatePrivilege_;
    /// <summary>
    /// If set, the user is authorized to update rows in the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool UpdatePrivilege {
      get { if ((_hasBits0 & 4) != 0) { return updatePrivilege_; } else { return UpdatePrivilegeDefaultValue; } }
      set {
        _hasBits0 |= 4;
        updatePrivilege_ = value;
      }
    }
    /// <summary>Gets whether the "update_privilege" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUpdatePrivilege {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "update_privilege" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUpdatePrivilege() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "delete_privilege" field.</summary>
    public const int DeletePrivilegeFieldNumber = 5;
    private readonly static bool DeletePrivilegeDefaultValue = false;

    private bool deletePrivilege_;
    /// <summary>
    /// If set, the user is authorized to delete rows in the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DeletePrivilege {
      get { if ((_hasBits0 & 8) != 0) { return deletePrivilege_; } else { return DeletePrivilegeDefaultValue; } }
      set {
        _hasBits0 |= 8;
        deletePrivilege_ = value;
      }
    }
    /// <summary>Gets whether the "delete_privilege" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDeletePrivilege {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "delete_privilege" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDeletePrivilege() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "column_privileges" field.</summary>
    public const int ColumnPrivilegesFieldNumber = 6;
    private static readonly pbc::MapField<int, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB>.Codec _map_columnPrivileges_codec
        = new pbc::MapField<int, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB>.Codec(pb::FieldCodec.ForInt32(8, 0), pb::FieldCodec.ForMessage(18, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB.Parser), 50);
    private readonly pbc::MapField<int, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB> columnPrivileges_ = new pbc::MapField<int, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB>();
    /// <summary>
    /// Per-column privileges, indexed by column ID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<int, global::Knet.Kudu.Client.Protobuf.Security.ColumnPrivilegePB> ColumnPrivileges {
      get { return columnPrivileges_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TablePrivilegePB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TablePrivilegePB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      if (ScanPrivilege != other.ScanPrivilege) return false;
      if (InsertPrivilege != other.InsertPrivilege) return false;
      if (UpdatePrivilege != other.UpdatePrivilege) return false;
      if (DeletePrivilege != other.DeletePrivilege) return false;
      if (!ColumnPrivileges.Equals(other.ColumnPrivileges)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTableId) hash ^= TableId.GetHashCode();
      if (HasScanPrivilege) hash ^= ScanPrivilege.GetHashCode();
      if (HasInsertPrivilege) hash ^= InsertPrivilege.GetHashCode();
      if (HasUpdatePrivilege) hash ^= UpdatePrivilege.GetHashCode();
      if (HasDeletePrivilege) hash ^= DeletePrivilege.GetHashCode();
      hash ^= ColumnPrivileges.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTableId) {
        output.WriteRawTag(10);
        output.WriteString(TableId);
      }
      if (HasScanPrivilege) {
        output.WriteRawTag(16);
        output.WriteBool(ScanPrivilege);
      }
      if (HasInsertPrivilege) {
        output.WriteRawTag(24);
        output.WriteBool(InsertPrivilege);
      }
      if (HasUpdatePrivilege) {
        output.WriteRawTag(32);
        output.WriteBool(UpdatePrivilege);
      }
      if (HasDeletePrivilege) {
        output.WriteRawTag(40);
        output.WriteBool(DeletePrivilege);
      }
      columnPrivileges_.WriteTo(ref output, _map_columnPrivileges_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTableId) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableId);
      }
      if (HasScanPrivilege) {
        size += 1 + 1;
      }
      if (HasInsertPrivilege) {
        size += 1 + 1;
      }
      if (HasUpdatePrivilege) {
        size += 1 + 1;
      }
      if (HasDeletePrivilege) {
        size += 1 + 1;
      }
      size += columnPrivileges_.CalculateSize(_map_columnPrivileges_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TablePrivilegePB other) {
      if (other == null) {
        return;
      }
      if (other.HasTableId) {
        TableId = other.TableId;
      }
      if (other.HasScanPrivilege) {
        ScanPrivilege = other.ScanPrivilege;
      }
      if (other.HasInsertPrivilege) {
        InsertPrivilege = other.InsertPrivilege;
      }
      if (other.HasUpdatePrivilege) {
        UpdatePrivilege = other.UpdatePrivilege;
      }
      if (other.HasDeletePrivilege) {
        DeletePrivilege = other.DeletePrivilege;
      }
      columnPrivileges_.Add(other.columnPrivileges_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableId = input.ReadString();
            break;
          }
          case 16: {
            ScanPrivilege = input.ReadBool();
            break;
          }
          case 24: {
            InsertPrivilege = input.ReadBool();
            break;
          }
          case 32: {
            UpdatePrivilege = input.ReadBool();
            break;
          }
          case 40: {
            DeletePrivilege = input.ReadBool();
            break;
          }
          case 50: {
            columnPrivileges_.AddEntriesFrom(ref input, _map_columnPrivileges_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthnTokenPB : pb::IMessage<AuthnTokenPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<AuthnTokenPB> _parser = new pb::MessageParser<AuthnTokenPB>(() => new AuthnTokenPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuthnTokenPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthnTokenPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthnTokenPB(AuthnTokenPB other) : this() {
      username_ = other.username_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthnTokenPB Clone() {
      return new AuthnTokenPB(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private readonly static string UsernameDefaultValue = "";

    private string username_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Username {
      get { return username_ ?? UsernameDefaultValue; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "username" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUsername {
      get { return username_ != null; }
    }
    /// <summary>Clears the value of the "username" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUsername() {
      username_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuthnTokenPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuthnTokenPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUsername) hash ^= Username.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUsername) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUsername) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuthnTokenPB other) {
      if (other == null) {
        return;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AuthzTokenPB : pb::IMessage<AuthzTokenPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<AuthzTokenPB> _parser = new pb::MessageParser<AuthzTokenPB>(() => new AuthzTokenPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<AuthzTokenPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthzTokenPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthzTokenPB(AuthzTokenPB other) : this() {
      username_ = other.username_;
      tablePrivilege_ = other.tablePrivilege_ != null ? other.tablePrivilege_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public AuthzTokenPB Clone() {
      return new AuthzTokenPB(this);
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 1;
    private readonly static string UsernameDefaultValue = "";

    private string username_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Username {
      get { return username_ ?? UsernameDefaultValue; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "username" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasUsername {
      get { return username_ != null; }
    }
    /// <summary>Clears the value of the "username" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearUsername() {
      username_ = null;
    }

    /// <summary>Field number for the "table_privilege" field.</summary>
    public const int TablePrivilegeFieldNumber = 2;
    private global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB tablePrivilege_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB TablePrivilege {
      get { return tablePrivilege_; }
      set {
        tablePrivilege_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as AuthzTokenPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(AuthzTokenPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Username != other.Username) return false;
      if (!object.Equals(TablePrivilege, other.TablePrivilege)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasUsername) hash ^= Username.GetHashCode();
      if (tablePrivilege_ != null) hash ^= TablePrivilege.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasUsername) {
        output.WriteRawTag(10);
        output.WriteString(Username);
      }
      if (tablePrivilege_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TablePrivilege);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasUsername) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (tablePrivilege_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TablePrivilege);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(AuthzTokenPB other) {
      if (other == null) {
        return;
      }
      if (other.HasUsername) {
        Username = other.Username;
      }
      if (other.tablePrivilege_ != null) {
        if (tablePrivilege_ == null) {
          TablePrivilege = new global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB();
        }
        TablePrivilege.MergeFrom(other.TablePrivilege);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Username = input.ReadString();
            break;
          }
          case 18: {
            if (tablePrivilege_ == null) {
              TablePrivilege = new global::Knet.Kudu.Client.Protobuf.Security.TablePrivilegePB();
            }
            input.ReadMessage(TablePrivilege);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TokenPB : pb::IMessage<TokenPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TokenPB> _parser = new pb::MessageParser<TokenPB>(() => new TokenPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TokenPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenPB(TokenPB other) : this() {
      _hasBits0 = other._hasBits0;
      expireUnixEpochSeconds_ = other.expireUnixEpochSeconds_;
      incompatibleFeatures_ = other.incompatibleFeatures_.Clone();
      switch (other.TokenCase) {
        case TokenOneofCase.Authn:
          Authn = other.Authn.Clone();
          break;
        case TokenOneofCase.Authz:
          Authz = other.Authz.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenPB Clone() {
      return new TokenPB(this);
    }

    /// <summary>Field number for the "expire_unix_epoch_seconds" field.</summary>
    public const int ExpireUnixEpochSecondsFieldNumber = 1;
    private readonly static long ExpireUnixEpochSecondsDefaultValue = 0L;

    private long expireUnixEpochSeconds_;
    /// <summary>
    /// The time at which this token expires, in seconds since the
    /// unix epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireUnixEpochSeconds {
      get { if ((_hasBits0 & 1) != 0) { return expireUnixEpochSeconds_; } else { return ExpireUnixEpochSecondsDefaultValue; } }
      set {
        _hasBits0 |= 1;
        expireUnixEpochSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "expire_unix_epoch_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpireUnixEpochSeconds {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "expire_unix_epoch_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpireUnixEpochSeconds() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "incompatible_features" field.</summary>
    public const int IncompatibleFeaturesFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_incompatibleFeatures_codec
        = pb::FieldCodec.ForInt32(16);
    private readonly pbc::RepeatedField<int> incompatibleFeatures_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// List of incompatible features used by this token. If a feature
    /// is listed in the token and a server verifying/authorizing the token
    /// sees an UNKNOWN value in this list, it should reject the token.
    ///
    /// This allows us to safely add "restrictive" content to tokens
    /// and have a "default deny" policy on servers that may not understand
    /// them.
    ///
    /// We use an int32 here but the values correspond to the 'Feature' enum
    /// above. This is to deal with protobuf's odd handling of unknown enum
    /// values (see KUDU-1850).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> IncompatibleFeatures {
      get { return incompatibleFeatures_; }
    }

    /// <summary>Field number for the "authn" field.</summary>
    public const int AuthnFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB Authn {
      get { return tokenCase_ == TokenOneofCase.Authn ? (global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB) token_ : null; }
      set {
        token_ = value;
        tokenCase_ = value == null ? TokenOneofCase.None : TokenOneofCase.Authn;
      }
    }

    /// <summary>Field number for the "authz" field.</summary>
    public const int AuthzFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB Authz {
      get { return tokenCase_ == TokenOneofCase.Authz ? (global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB) token_ : null; }
      set {
        token_ = value;
        tokenCase_ = value == null ? TokenOneofCase.None : TokenOneofCase.Authz;
      }
    }

    private object token_;
    /// <summary>Enum of possible cases for the "token" oneof.</summary>
    public enum TokenOneofCase {
      None = 0,
      Authn = 3,
      Authz = 4,
    }
    private TokenOneofCase tokenCase_ = TokenOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenOneofCase TokenCase {
      get { return tokenCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearToken() {
      tokenCase_ = TokenOneofCase.None;
      token_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TokenPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TokenPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ExpireUnixEpochSeconds != other.ExpireUnixEpochSeconds) return false;
      if(!incompatibleFeatures_.Equals(other.incompatibleFeatures_)) return false;
      if (!object.Equals(Authn, other.Authn)) return false;
      if (!object.Equals(Authz, other.Authz)) return false;
      if (TokenCase != other.TokenCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasExpireUnixEpochSeconds) hash ^= ExpireUnixEpochSeconds.GetHashCode();
      hash ^= incompatibleFeatures_.GetHashCode();
      if (tokenCase_ == TokenOneofCase.Authn) hash ^= Authn.GetHashCode();
      if (tokenCase_ == TokenOneofCase.Authz) hash ^= Authz.GetHashCode();
      hash ^= (int) tokenCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasExpireUnixEpochSeconds) {
        output.WriteRawTag(8);
        output.WriteInt64(ExpireUnixEpochSeconds);
      }
      incompatibleFeatures_.WriteTo(ref output, _repeated_incompatibleFeatures_codec);
      if (tokenCase_ == TokenOneofCase.Authn) {
        output.WriteRawTag(26);
        output.WriteMessage(Authn);
      }
      if (tokenCase_ == TokenOneofCase.Authz) {
        output.WriteRawTag(34);
        output.WriteMessage(Authz);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasExpireUnixEpochSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireUnixEpochSeconds);
      }
      size += incompatibleFeatures_.CalculateSize(_repeated_incompatibleFeatures_codec);
      if (tokenCase_ == TokenOneofCase.Authn) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Authn);
      }
      if (tokenCase_ == TokenOneofCase.Authz) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Authz);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TokenPB other) {
      if (other == null) {
        return;
      }
      if (other.HasExpireUnixEpochSeconds) {
        ExpireUnixEpochSeconds = other.ExpireUnixEpochSeconds;
      }
      incompatibleFeatures_.Add(other.incompatibleFeatures_);
      switch (other.TokenCase) {
        case TokenOneofCase.Authn:
          if (Authn == null) {
            Authn = new global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB();
          }
          Authn.MergeFrom(other.Authn);
          break;
        case TokenOneofCase.Authz:
          if (Authz == null) {
            Authz = new global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB();
          }
          Authz.MergeFrom(other.Authz);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            ExpireUnixEpochSeconds = input.ReadInt64();
            break;
          }
          case 18:
          case 16: {
            incompatibleFeatures_.AddEntriesFrom(ref input, _repeated_incompatibleFeatures_codec);
            break;
          }
          case 26: {
            global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB subBuilder = new global::Knet.Kudu.Client.Protobuf.Security.AuthnTokenPB();
            if (tokenCase_ == TokenOneofCase.Authn) {
              subBuilder.MergeFrom(Authn);
            }
            input.ReadMessage(subBuilder);
            Authn = subBuilder;
            break;
          }
          case 34: {
            global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB subBuilder = new global::Knet.Kudu.Client.Protobuf.Security.AuthzTokenPB();
            if (tokenCase_ == TokenOneofCase.Authz) {
              subBuilder.MergeFrom(Authz);
            }
            input.ReadMessage(subBuilder);
            Authz = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TokenPB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Feature {
        /// <summary>
        /// Protobuf doesn't let us define a enum with no values,
        /// so we've got this placeholder in here for now. When we add
        /// the first real feature flag, we can remove this.
        /// </summary>
        [pbr::OriginalName("UNUSED_PLACEHOLDER")] UnusedPlaceholder = 999,
      }

    }
    #endregion

  }

  public sealed partial class SignedTokenPB : pb::IMessage<SignedTokenPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<SignedTokenPB> _parser = new pb::MessageParser<SignedTokenPB>(() => new SignedTokenPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<SignedTokenPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SignedTokenPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SignedTokenPB(SignedTokenPB other) : this() {
      _hasBits0 = other._hasBits0;
      tokenData_ = other.tokenData_;
      signature_ = other.signature_;
      signingKeySeqNum_ = other.signingKeySeqNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public SignedTokenPB Clone() {
      return new SignedTokenPB(this);
    }

    /// <summary>Field number for the "token_data" field.</summary>
    public const int TokenDataFieldNumber = 1;
    private readonly static pb::ByteString TokenDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString tokenData_;
    /// <summary>
    /// The actual token data. This is a serialized TokenPB protobuf. However, we use a
    /// 'bytes' field, since protobuf doesn't guarantee that if two implementations serialize
    /// a protobuf, they'll necessary get bytewise identical results, particularly in the
    /// presence of unknown fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TokenData {
      get { return tokenData_ ?? TokenDataDefaultValue; }
      set {
        tokenData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "token_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTokenData {
      get { return tokenData_ != null; }
    }
    /// <summary>Clears the value of the "token_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTokenData() {
      tokenData_ = null;
    }

    /// <summary>Field number for the "signature" field.</summary>
    public const int SignatureFieldNumber = 2;
    private readonly static pb::ByteString SignatureDefaultValue = pb::ByteString.Empty;

    private pb::ByteString signature_;
    /// <summary>
    /// The cryptographic signature of 'token_contents'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Signature {
      get { return signature_ ?? SignatureDefaultValue; }
      set {
        signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "signature" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSignature {
      get { return signature_ != null; }
    }
    /// <summary>Clears the value of the "signature" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSignature() {
      signature_ = null;
    }

    /// <summary>Field number for the "signing_key_seq_num" field.</summary>
    public const int SigningKeySeqNumFieldNumber = 3;
    private readonly static long SigningKeySeqNumDefaultValue = 0L;

    private long signingKeySeqNum_;
    /// <summary>
    /// The sequence number of the key which produced 'signature'.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long SigningKeySeqNum {
      get { if ((_hasBits0 & 1) != 0) { return signingKeySeqNum_; } else { return SigningKeySeqNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        signingKeySeqNum_ = value;
      }
    }
    /// <summary>Gets whether the "signing_key_seq_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSigningKeySeqNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "signing_key_seq_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSigningKeySeqNum() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as SignedTokenPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(SignedTokenPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TokenData != other.TokenData) return false;
      if (Signature != other.Signature) return false;
      if (SigningKeySeqNum != other.SigningKeySeqNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTokenData) hash ^= TokenData.GetHashCode();
      if (HasSignature) hash ^= Signature.GetHashCode();
      if (HasSigningKeySeqNum) hash ^= SigningKeySeqNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTokenData) {
        output.WriteRawTag(10);
        output.WriteBytes(TokenData);
      }
      if (HasSignature) {
        output.WriteRawTag(18);
        output.WriteBytes(Signature);
      }
      if (HasSigningKeySeqNum) {
        output.WriteRawTag(24);
        output.WriteInt64(SigningKeySeqNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTokenData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TokenData);
      }
      if (HasSignature) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Signature);
      }
      if (HasSigningKeySeqNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SigningKeySeqNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(SignedTokenPB other) {
      if (other == null) {
        return;
      }
      if (other.HasTokenData) {
        TokenData = other.TokenData;
      }
      if (other.HasSignature) {
        Signature = other.Signature;
      }
      if (other.HasSigningKeySeqNum) {
        SigningKeySeqNum = other.SigningKeySeqNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TokenData = input.ReadBytes();
            break;
          }
          case 18: {
            Signature = input.ReadBytes();
            break;
          }
          case 24: {
            SigningKeySeqNum = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A private key used to sign tokens.
  /// </summary>
  public sealed partial class TokenSigningPrivateKeyPB : pb::IMessage<TokenSigningPrivateKeyPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TokenSigningPrivateKeyPB> _parser = new pb::MessageParser<TokenSigningPrivateKeyPB>(() => new TokenSigningPrivateKeyPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TokenSigningPrivateKeyPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPrivateKeyPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPrivateKeyPB(TokenSigningPrivateKeyPB other) : this() {
      _hasBits0 = other._hasBits0;
      keySeqNum_ = other.keySeqNum_;
      rsaKeyDer_ = other.rsaKeyDer_;
      expireUnixEpochSeconds_ = other.expireUnixEpochSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPrivateKeyPB Clone() {
      return new TokenSigningPrivateKeyPB(this);
    }

    /// <summary>Field number for the "key_seq_num" field.</summary>
    public const int KeySeqNumFieldNumber = 1;
    private readonly static long KeySeqNumDefaultValue = 0L;

    private long keySeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long KeySeqNum {
      get { if ((_hasBits0 & 1) != 0) { return keySeqNum_; } else { return KeySeqNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        keySeqNum_ = value;
      }
    }
    /// <summary>Gets whether the "key_seq_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeySeqNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "key_seq_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeySeqNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rsa_key_der" field.</summary>
    public const int RsaKeyDerFieldNumber = 2;
    private readonly static pb::ByteString RsaKeyDerDefaultValue = pb::ByteString.Empty;

    private pb::ByteString rsaKeyDer_;
    /// <summary>
    /// The private key material, in DER format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString RsaKeyDer {
      get { return rsaKeyDer_ ?? RsaKeyDerDefaultValue; }
      set {
        rsaKeyDer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rsa_key_der" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRsaKeyDer {
      get { return rsaKeyDer_ != null; }
    }
    /// <summary>Clears the value of the "rsa_key_der" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRsaKeyDer() {
      rsaKeyDer_ = null;
    }

    /// <summary>Field number for the "expire_unix_epoch_seconds" field.</summary>
    public const int ExpireUnixEpochSecondsFieldNumber = 3;
    private readonly static long ExpireUnixEpochSecondsDefaultValue = 0L;

    private long expireUnixEpochSeconds_;
    /// <summary>
    /// The time at which signatures made by this key should no longer be valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireUnixEpochSeconds {
      get { if ((_hasBits0 & 2) != 0) { return expireUnixEpochSeconds_; } else { return ExpireUnixEpochSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireUnixEpochSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "expire_unix_epoch_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpireUnixEpochSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expire_unix_epoch_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpireUnixEpochSeconds() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TokenSigningPrivateKeyPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TokenSigningPrivateKeyPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeySeqNum != other.KeySeqNum) return false;
      if (RsaKeyDer != other.RsaKeyDer) return false;
      if (ExpireUnixEpochSeconds != other.ExpireUnixEpochSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKeySeqNum) hash ^= KeySeqNum.GetHashCode();
      if (HasRsaKeyDer) hash ^= RsaKeyDer.GetHashCode();
      if (HasExpireUnixEpochSeconds) hash ^= ExpireUnixEpochSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKeySeqNum) {
        output.WriteRawTag(8);
        output.WriteInt64(KeySeqNum);
      }
      if (HasRsaKeyDer) {
        output.WriteRawTag(18);
        output.WriteBytes(RsaKeyDer);
      }
      if (HasExpireUnixEpochSeconds) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpireUnixEpochSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasKeySeqNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KeySeqNum);
      }
      if (HasRsaKeyDer) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaKeyDer);
      }
      if (HasExpireUnixEpochSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireUnixEpochSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TokenSigningPrivateKeyPB other) {
      if (other == null) {
        return;
      }
      if (other.HasKeySeqNum) {
        KeySeqNum = other.KeySeqNum;
      }
      if (other.HasRsaKeyDer) {
        RsaKeyDer = other.RsaKeyDer;
      }
      if (other.HasExpireUnixEpochSeconds) {
        ExpireUnixEpochSeconds = other.ExpireUnixEpochSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KeySeqNum = input.ReadInt64();
            break;
          }
          case 18: {
            RsaKeyDer = input.ReadBytes();
            break;
          }
          case 24: {
            ExpireUnixEpochSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// A public key corresponding to the private key used to sign tokens. Only
  /// this part is necessary for token verification.
  /// </summary>
  public sealed partial class TokenSigningPublicKeyPB : pb::IMessage<TokenSigningPublicKeyPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TokenSigningPublicKeyPB> _parser = new pb::MessageParser<TokenSigningPublicKeyPB>(() => new TokenSigningPublicKeyPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TokenSigningPublicKeyPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Security.TokenReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPublicKeyPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPublicKeyPB(TokenSigningPublicKeyPB other) : this() {
      _hasBits0 = other._hasBits0;
      keySeqNum_ = other.keySeqNum_;
      rsaKeyDer_ = other.rsaKeyDer_;
      expireUnixEpochSeconds_ = other.expireUnixEpochSeconds_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TokenSigningPublicKeyPB Clone() {
      return new TokenSigningPublicKeyPB(this);
    }

    /// <summary>Field number for the "key_seq_num" field.</summary>
    public const int KeySeqNumFieldNumber = 1;
    private readonly static long KeySeqNumDefaultValue = 0L;

    private long keySeqNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long KeySeqNum {
      get { if ((_hasBits0 & 1) != 0) { return keySeqNum_; } else { return KeySeqNumDefaultValue; } }
      set {
        _hasBits0 |= 1;
        keySeqNum_ = value;
      }
    }
    /// <summary>Gets whether the "key_seq_num" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKeySeqNum {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "key_seq_num" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKeySeqNum() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "rsa_key_der" field.</summary>
    public const int RsaKeyDerFieldNumber = 2;
    private readonly static pb::ByteString RsaKeyDerDefaultValue = pb::ByteString.Empty;

    private pb::ByteString rsaKeyDer_;
    /// <summary>
    /// The public key material, in DER format.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString RsaKeyDer {
      get { return rsaKeyDer_ ?? RsaKeyDerDefaultValue; }
      set {
        rsaKeyDer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rsa_key_der" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRsaKeyDer {
      get { return rsaKeyDer_ != null; }
    }
    /// <summary>Clears the value of the "rsa_key_der" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRsaKeyDer() {
      rsaKeyDer_ = null;
    }

    /// <summary>Field number for the "expire_unix_epoch_seconds" field.</summary>
    public const int ExpireUnixEpochSecondsFieldNumber = 3;
    private readonly static long ExpireUnixEpochSecondsDefaultValue = 0L;

    private long expireUnixEpochSeconds_;
    /// <summary>
    /// The time at which signatures made by this key should no longer be valid.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long ExpireUnixEpochSeconds {
      get { if ((_hasBits0 & 2) != 0) { return expireUnixEpochSeconds_; } else { return ExpireUnixEpochSecondsDefaultValue; } }
      set {
        _hasBits0 |= 2;
        expireUnixEpochSeconds_ = value;
      }
    }
    /// <summary>Gets whether the "expire_unix_epoch_seconds" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasExpireUnixEpochSeconds {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "expire_unix_epoch_seconds" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearExpireUnixEpochSeconds() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TokenSigningPublicKeyPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TokenSigningPublicKeyPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (KeySeqNum != other.KeySeqNum) return false;
      if (RsaKeyDer != other.RsaKeyDer) return false;
      if (ExpireUnixEpochSeconds != other.ExpireUnixEpochSeconds) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasKeySeqNum) hash ^= KeySeqNum.GetHashCode();
      if (HasRsaKeyDer) hash ^= RsaKeyDer.GetHashCode();
      if (HasExpireUnixEpochSeconds) hash ^= ExpireUnixEpochSeconds.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasKeySeqNum) {
        output.WriteRawTag(8);
        output.WriteInt64(KeySeqNum);
      }
      if (HasRsaKeyDer) {
        output.WriteRawTag(18);
        output.WriteBytes(RsaKeyDer);
      }
      if (HasExpireUnixEpochSeconds) {
        output.WriteRawTag(24);
        output.WriteInt64(ExpireUnixEpochSeconds);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasKeySeqNum) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(KeySeqNum);
      }
      if (HasRsaKeyDer) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RsaKeyDer);
      }
      if (HasExpireUnixEpochSeconds) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpireUnixEpochSeconds);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TokenSigningPublicKeyPB other) {
      if (other == null) {
        return;
      }
      if (other.HasKeySeqNum) {
        KeySeqNum = other.KeySeqNum;
      }
      if (other.HasRsaKeyDer) {
        RsaKeyDer = other.RsaKeyDer;
      }
      if (other.HasExpireUnixEpochSeconds) {
        ExpireUnixEpochSeconds = other.ExpireUnixEpochSeconds;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            KeySeqNum = input.ReadInt64();
            break;
          }
          case 18: {
            RsaKeyDer = input.ReadBytes();
            break;
          }
          case 24: {
            ExpireUnixEpochSeconds = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
