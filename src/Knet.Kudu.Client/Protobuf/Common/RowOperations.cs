// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kudu/common/row_operations.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Knet.Kudu.Client.Protobuf {

  /// <summary>Holder for reflection information generated from kudu/common/row_operations.proto</summary>
  public static partial class RowOperationsReflection {

    #region Descriptor
    /// <summary>File descriptor for kudu/common/row_operations.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RowOperationsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBrdWR1L2NvbW1vbi9yb3dfb3BlcmF0aW9ucy5wcm90bxIEa3VkdRoXa3Vk",
            "dS91dGlsL3BiX3V0aWwucHJvdG8iwAIKD1Jvd09wZXJhdGlvbnNQQhISCgRy",
            "b3dzGAIgASgMQgSItRgBEhsKDWluZGlyZWN0X2RhdGEYAyABKAxCBIi1GAEi",
            "+wEKBFR5cGUSCwoHVU5LTk9XThAAEgoKBklOU0VSVBABEgoKBlVQREFURRAC",
            "EgoKBkRFTEVURRADEgoKBlVQU0VSVBAFEhEKDUlOU0VSVF9JR05PUkUQChIR",
            "Cg1VUERBVEVfSUdOT1JFEAsSEQoNREVMRVRFX0lHTk9SRRAMEg0KCVNQTElU",
            "X1JPVxAEEhUKEVJBTkdFX0xPV0VSX0JPVU5EEAYSFQoRUkFOR0VfVVBQRVJf",
            "Qk9VTkQQBxIfChtFWENMVVNJVkVfUkFOR0VfTE9XRVJfQk9VTkQQCBIfChtJ",
            "TkNMVVNJVkVfUkFOR0VfVVBQRVJfQk9VTkQQCUItCg9vcmcuYXBhY2hlLmt1",
            "ZHWqAhlLbmV0Lkt1ZHUuQ2xpZW50LlByb3RvYnVm"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Knet.Kudu.Client.Protobuf.PbUtilReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.RowOperationsPB), global::Knet.Kudu.Client.Protobuf.RowOperationsPB.Parser, new[]{ "Rows", "IndirectData" }, null, new[]{ typeof(global::Knet.Kudu.Client.Protobuf.RowOperationsPB.Types.Type) }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A set of operations (INSERT, UPDATE, UPSERT, or DELETE) to apply to a table,
  /// or the set of split rows and range bounds when creating or altering table.
  /// Range bounds determine the boundaries of range partitions during table
  /// creation, split rows further subdivide the ranges into more partitions.
  /// </summary>
  public sealed partial class RowOperationsPB : pb::IMessage<RowOperationsPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<RowOperationsPB> _parser = new pb::MessageParser<RowOperationsPB>(() => new RowOperationsPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RowOperationsPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.RowOperationsReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowOperationsPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowOperationsPB(RowOperationsPB other) : this() {
      rows_ = other.rows_;
      indirectData_ = other.indirectData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowOperationsPB Clone() {
      return new RowOperationsPB(this);
    }

    /// <summary>Field number for the "rows" field.</summary>
    public const int RowsFieldNumber = 2;
    private readonly static pb::ByteString RowsDefaultValue = pb::ByteString.Empty;

    private pb::ByteString rows_;
    /// <summary>
    /// The row data for each operation is stored in the following format:
    ///
    /// [operation type] (one byte):
    ///   A single-byte field which determines the type of operation. The values are
    ///   based on the 'Type' enum above.
    /// [column isset bitmap]   (one bit for each column in the Schema, rounded to nearest byte)
    ///   A set bit in this bitmap indicates that the user has specified the given column
    ///   in the row. This indicates that the column will be present in the data to follow.
    /// [null bitmap]           (one bit for each Schema column, rounded to nearest byte)
    ///   A set bit in this bitmap indicates that the given column is NULL.
    ///   This is only present if there are any nullable columns.
    /// [column data]
    ///   For each column which is set and not NULL, the column's data follows. The data
    ///   format of each cell is the canonical in-memory format (eg little endian).
    ///   For string data, the pointers are relative to 'indirect_data'.
    ///
    /// The rows are concatenated end-to-end with no padding/alignment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString Rows {
      get { return rows_ ?? RowsDefaultValue; }
      set {
        rows_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "rows" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRows {
      get { return rows_ != null; }
    }
    /// <summary>Clears the value of the "rows" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRows() {
      rows_ = null;
    }

    /// <summary>Field number for the "indirect_data" field.</summary>
    public const int IndirectDataFieldNumber = 3;
    private readonly static pb::ByteString IndirectDataDefaultValue = pb::ByteString.Empty;

    private pb::ByteString indirectData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString IndirectData {
      get { return indirectData_ ?? IndirectDataDefaultValue; }
      set {
        indirectData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "indirect_data" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasIndirectData {
      get { return indirectData_ != null; }
    }
    /// <summary>Clears the value of the "indirect_data" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearIndirectData() {
      indirectData_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RowOperationsPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RowOperationsPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Rows != other.Rows) return false;
      if (IndirectData != other.IndirectData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasRows) hash ^= Rows.GetHashCode();
      if (HasIndirectData) hash ^= IndirectData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasRows) {
        output.WriteRawTag(18);
        output.WriteBytes(Rows);
      }
      if (HasIndirectData) {
        output.WriteRawTag(26);
        output.WriteBytes(IndirectData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasRows) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Rows);
      }
      if (HasIndirectData) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IndirectData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RowOperationsPB other) {
      if (other == null) {
        return;
      }
      if (other.HasRows) {
        Rows = other.Rows;
      }
      if (other.HasIndirectData) {
        IndirectData = other.IndirectData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            Rows = input.ReadBytes();
            break;
          }
          case 26: {
            IndirectData = input.ReadBytes();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the RowOperationsPB message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum Type {
        [pbr::OriginalName("UNKNOWN")] Unknown = 0,
        [pbr::OriginalName("INSERT")] Insert = 1,
        [pbr::OriginalName("UPDATE")] Update = 2,
        [pbr::OriginalName("DELETE")] Delete = 3,
        [pbr::OriginalName("UPSERT")] Upsert = 5,
        [pbr::OriginalName("INSERT_IGNORE")] InsertIgnore = 10,
        [pbr::OriginalName("UPDATE_IGNORE")] UpdateIgnore = 11,
        [pbr::OriginalName("DELETE_IGNORE")] DeleteIgnore = 12,
        /// <summary>
        /// Used when specifying split rows on table creation.
        /// </summary>
        [pbr::OriginalName("SPLIT_ROW")] SplitRow = 4,
        /// <summary>
        /// Used when specifying an inclusive lower bound range on table creation.
        /// Should be followed by the associated upper bound. If all values are
        /// missing, then signifies unbounded.
        /// </summary>
        [pbr::OriginalName("RANGE_LOWER_BOUND")] RangeLowerBound = 6,
        /// <summary>
        /// Used when specifying an exclusive upper bound range on table creation.
        /// Should be preceded by the associated lower bound. If all values are
        /// missing, then signifies unbounded.
        /// </summary>
        [pbr::OriginalName("RANGE_UPPER_BOUND")] RangeUpperBound = 7,
        /// <summary>
        /// Used when specifying an exclusive lower bound range on table creation.
        /// Should be followed by the associated upper bound. If all values are
        /// missing, then signifies unbounded.
        /// </summary>
        [pbr::OriginalName("EXCLUSIVE_RANGE_LOWER_BOUND")] ExclusiveRangeLowerBound = 8,
        /// <summary>
        /// Used when specifying an inclusive upper bound range on table creation.
        /// Should be preceded by the associated lower bound. If all values are
        /// missing, then signifies unbounded.
        /// </summary>
        [pbr::OriginalName("INCLUSIVE_RANGE_UPPER_BOUND")] InclusiveRangeUpperBound = 9,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
