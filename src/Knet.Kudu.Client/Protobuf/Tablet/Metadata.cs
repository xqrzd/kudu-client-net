// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: kudu/tablet/metadata.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Knet.Kudu.Client.Protobuf.Tablet {

  /// <summary>Holder for reflection information generated from kudu/tablet/metadata.proto</summary>
  public static partial class MetadataReflection {

    #region Descriptor
    /// <summary>File descriptor for kudu/tablet/metadata.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MetadataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChprdWR1L3RhYmxldC9tZXRhZGF0YS5wcm90bxILa3VkdS50YWJsZXQaGGt1",
            "ZHUvY29tbW9uL2NvbW1vbi5wcm90bxoZa3VkdS9jb25zZW5zdXMvb3BpZC5w",
            "cm90bxoQa3VkdS9mcy9mcy5wcm90byJBCgxDb2x1bW5EYXRhUEISHgoFYmxv",
            "Y2sYAiACKAsyDy5rdWR1LkJsb2NrSWRQQhIRCgljb2x1bW5faWQYBCABKAUi",
            "LQoLRGVsdGFEYXRhUEISHgoFYmxvY2sYAiACKAsyDy5rdWR1LkJsb2NrSWRQ",
            "QiLdAgoMUm93U2V0RGF0YVBCEgoKAmlkGAEgAigEEhsKE2xhc3RfZHVyYWJs",
            "ZV9kbXNfaWQYAiACKAMSKgoHY29sdW1ucxgDIAMoCzIZLmt1ZHUudGFibGV0",
            "LkNvbHVtbkRhdGFQQhItCgtyZWRvX2RlbHRhcxgEIAMoCzIYLmt1ZHUudGFi",
            "bGV0LkRlbHRhRGF0YVBCEi0KC3VuZG9fZGVsdGFzGAUgAygLMhgua3VkdS50",
            "YWJsZXQuRGVsdGFEYXRhUEISJAoLYmxvb21fYmxvY2sYBiABKAsyDy5rdWR1",
            "LkJsb2NrSWRQQhIqChFhZGhvY19pbmRleF9ibG9jaxgHIAEoCzIPLmt1ZHUu",
            "QmxvY2tJZFBCEhcKD21pbl9lbmNvZGVkX2tleRgIIAEoDBIXCg9tYXhfZW5j",
            "b2RlZF9rZXkYCSABKAwSFgoObGl2ZV9yb3dfY291bnQYCiABKAMiewoNVHhu",
            "TWV0YWRhdGFQQhIPCgdhYm9ydGVkGAEgASgIEhgKEGNvbW1pdF90aW1lc3Rh",
            "bXAYAiABKAMSIAoYY29tbWl0X212Y2Nfb3BfdGltZXN0YW1wGAMgASgDEh0K",
            "FWZsdXNoZWRfY29tbWl0dGVkX21ycxgEIAEoCCLUBgoSVGFibGV0U3VwZXJC",
            "bG9ja1BCEhAKCHRhYmxlX2lkGAEgAigMEhEKCXRhYmxldF9pZBgCIAIoDBIl",
            "Cgp0YWJsZV90eXBlGBMgASgOMhEua3VkdS5UYWJsZVR5cGVQQhIbChNsYXN0",
            "X2R1cmFibGVfbXJzX2lkGAMgAigDEhEKCXN0YXJ0X2tleRgEIAEoDBIPCgdl",
            "bmRfa2V5GAUgASgMEiQKCXBhcnRpdGlvbhgNIAEoCzIRLmt1ZHUuUGFydGl0",
            "aW9uUEISKgoHcm93c2V0cxgGIAMoCzIZLmt1ZHUudGFibGV0LlJvd1NldERh",
            "dGFQQhISCgp0YWJsZV9uYW1lGAcgAigJEh4KBnNjaGVtYRgIIAIoCzIOLmt1",
            "ZHUuU2NoZW1hUEISFgoOc2NoZW1hX3ZlcnNpb24YCSACKA0SMQoQcGFydGl0",
            "aW9uX3NjaGVtYRgOIAEoCzIXLmt1ZHUuUGFydGl0aW9uU2NoZW1hUEISTAoR",
            "dGFibGV0X2RhdGFfc3RhdGUYCiABKA4yHC5rdWR1LnRhYmxldC5UYWJsZXRE",
            "YXRhU3RhdGU6E1RBQkxFVF9EQVRBX1VOS05PV04SKAoPb3JwaGFuZWRfYmxv",
            "Y2tzGAsgAygLMg8ua3VkdS5CbG9ja0lkUEISOAoadG9tYnN0b25lX2xhc3Rf",
            "bG9nZ2VkX29waWQYDCABKAsyFC5rdWR1LmNvbnNlbnN1cy5PcElkEiwKDmRh",
            "dGFfZGlyX2dyb3VwGA8gASgLMhQua3VkdS5EYXRhRGlyR3JvdXBQQhIfChdz",
            "dXBwb3J0c19saXZlX3Jvd19jb3VudBgQIAEoCBIuCgxleHRyYV9jb25maWcY",
            "ESABKAsyGC5rdWR1LlRhYmxlRXh0cmFDb25maWdQQhIXCg9kaW1lbnNpb25f",
            "bGFiZWwYEiABKAkSRgoMdHhuX21ldGFkYXRhGBQgAygLMjAua3VkdS50YWJs",
            "ZXQuVGFibGV0U3VwZXJCbG9ja1BCLlR4bk1ldGFkYXRhRW50cnkaTgoQVHhu",
            "TWV0YWRhdGFFbnRyeRILCgNrZXkYASABKAMSKQoFdmFsdWUYAiABKAsyGi5r",
            "dWR1LnRhYmxldC5UeG5NZXRhZGF0YVBCOgI4ASJFChVSZXBvcnRlZFRhYmxl",
            "dFN0YXRzUEISFAoMb25fZGlza19zaXplGAEgASgEEhYKDmxpdmVfcm93X2Nv",
            "dW50GAIgASgEKpABCg9UYWJsZXREYXRhU3RhdGUSGAoTVEFCTEVUX0RBVEFf",
            "VU5LTk9XThDnBxIXChNUQUJMRVRfREFUQV9DT1BZSU5HEAASFQoRVEFCTEVU",
            "X0RBVEFfUkVBRFkQARIXChNUQUJMRVRfREFUQV9ERUxFVEVEEAISGgoWVEFC",
            "TEVUX0RBVEFfVE9NQlNUT05FRBADKpgBCg1UYWJsZXRTdGF0ZVBCEgwKB1VO",
            "S05PV04Q5wcSEwoPTk9UX0lOSVRJQUxJWkVEEAYSDwoLSU5JVElBTElaRUQQ",
            "BRIRCg1CT09UU1RSQVBQSU5HEAASCwoHUlVOTklORxABEgoKBkZBSUxFRBAC",
            "EgwKCFNUT1BQSU5HEAMSCwoHU1RPUFBFRBAHEgwKCFNIVVRET1dOEARCOwoW",
            "b3JnLmFwYWNoZS5rdWR1LnRhYmxldKoCIEtuZXQuS3VkdS5DbGllbnQuUHJv",
            "dG9idWYuVGFibGV0"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Knet.Kudu.Client.Protobuf.CommonReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.Consensus.OpidReflection.Descriptor, global::Knet.Kudu.Client.Protobuf.FsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState), typeof(global::Knet.Kudu.Client.Protobuf.Tablet.TabletStatePB), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB), global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB.Parser, new[]{ "Block", "ColumnId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB), global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB.Parser, new[]{ "Block" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB), global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB.Parser, new[]{ "Id", "LastDurableDmsId", "Columns", "RedoDeltas", "UndoDeltas", "BloomBlock", "AdhocIndexBlock", "MinEncodedKey", "MaxEncodedKey", "LiveRowCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB), global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB.Parser, new[]{ "Aborted", "CommitTimestamp", "CommitMvccOpTimestamp", "FlushedCommittedMrs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.TabletSuperBlockPB), global::Knet.Kudu.Client.Protobuf.Tablet.TabletSuperBlockPB.Parser, new[]{ "TableId", "TabletId", "TableType", "LastDurableMrsId", "StartKey", "EndKey", "Partition", "Rowsets", "TableName", "Schema", "SchemaVersion", "PartitionSchema", "TabletDataState", "OrphanedBlocks", "TombstoneLastLoggedOpid", "DataDirGroup", "SupportsLiveRowCount", "ExtraConfig", "DimensionLabel", "TxnMetadata" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::Knet.Kudu.Client.Protobuf.Tablet.ReportedTabletStatsPB), global::Knet.Kudu.Client.Protobuf.Tablet.ReportedTabletStatsPB.Parser, new[]{ "OnDiskSize", "LiveRowCount" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// State flags indicating whether the tablet is in the middle of being copied
  /// and is therefore not possible to bring up, whether it has been deleted, or
  /// whether the data is in a usable state.
  /// </summary>
  public enum TabletDataState {
    [pbr::OriginalName("TABLET_DATA_UNKNOWN")] TabletDataUnknown = 999,
    /// <summary>
    /// The tablet is set to TABLET_DATA_COPYING state when in the middle of
    /// copying data files from a remote peer. If a tablet server crashes with
    /// a tablet in this state, the tablet must be deleted and
    /// the Tablet Copy process must be restarted for that tablet.
    /// </summary>
    [pbr::OriginalName("TABLET_DATA_COPYING")] TabletDataCopying = 0,
    /// <summary>
    /// Fresh empty tablets and successfully copied tablets are set to the
    /// TABLET_DATA_READY state.
    /// </summary>
    [pbr::OriginalName("TABLET_DATA_READY")] TabletDataReady = 1,
    /// <summary>
    /// This tablet is in the process of being deleted.
    /// The tablet server should "roll forward" the deletion during boot,
    /// rather than trying to load the tablet.
    /// </summary>
    [pbr::OriginalName("TABLET_DATA_DELETED")] TabletDataDeleted = 2,
    /// <summary>
    /// The tablet has been deleted, and now just consists of a "tombstone".
    /// </summary>
    [pbr::OriginalName("TABLET_DATA_TOMBSTONED")] TabletDataTombstoned = 3,
  }

  /// <summary>
  /// Tablet states represent stages of a TabletReplica's object lifecycle and are
  /// reported to the master via tablet reports.
  ///
  /// Legal state transitions for a single TabletReplica object:
  ///
  /// NOT_INITIALIZED -> INITIALIZED -> BOOTSTRAPPING -> RUNNING -> STOPPING -> STOPPED -> SHUTDOWN
  ///             |              |                |                  ^ ^ ^
  ///             |              |                |                  | | |
  ///             |              |                +------------------+ | |
  ///             |              +-------------------------------------+ |
  ///             +------------------------------------------------------+
  ///
  /// Since a TabletReplica instance is replaced when a Tablet Copy operation
  /// occurs, from a remote perspective it is possible for a tablet replica to
  /// appear to transition from SHUTDOWN back to NOT_INITIALIZED.
  /// </summary>
  public enum TabletStatePB {
    [pbr::OriginalName("UNKNOWN")] Unknown = 999,
    /// <summary>
    /// Tablet has not yet been initialized.
    /// </summary>
    [pbr::OriginalName("NOT_INITIALIZED")] NotInitialized = 6,
    /// <summary>
    /// Tablet has been initialized but not yet started.
    /// </summary>
    [pbr::OriginalName("INITIALIZED")] Initialized = 5,
    /// <summary>
    /// Indicates the Tablet is bootstrapping, i.e. that the Tablet is not
    /// available for RPC.
    /// </summary>
    [pbr::OriginalName("BOOTSTRAPPING")] Bootstrapping = 0,
    /// <summary>
    /// Once the configuration phase is over Peers are in RUNNING state. In this
    /// state Peers are available for client RPCs.
    /// </summary>
    [pbr::OriginalName("RUNNING")] Running = 1,
    /// <summary>
    /// The tablet failed for some reason. TabletReplica::error() will return
    /// the reason for the failure.
    /// </summary>
    [pbr::OriginalName("FAILED")] Failed = 2,
    /// <summary>
    /// The Tablet is shutting down, and will not accept further requests.
    /// </summary>
    [pbr::OriginalName("STOPPING")] Stopping = 3,
    /// <summary>
    /// The tablet has been stopped, possibly because it has been tombstoned.
    /// </summary>
    [pbr::OriginalName("STOPPED")] Stopped = 7,
    /// <summary>
    /// The Tablet has been completely shut down.
    /// </summary>
    [pbr::OriginalName("SHUTDOWN")] Shutdown = 4,
  }

  #endregion

  #region Messages
  public sealed partial class ColumnDataPB : pb::IMessage<ColumnDataPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ColumnDataPB> _parser = new pb::MessageParser<ColumnDataPB>(() => new ColumnDataPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ColumnDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnDataPB(ColumnDataPB other) : this() {
      _hasBits0 = other._hasBits0;
      block_ = other.block_ != null ? other.block_.Clone() : null;
      columnId_ = other.columnId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ColumnDataPB Clone() {
      return new ColumnDataPB(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::Knet.Kudu.Client.Protobuf.BlockIdPB block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.BlockIdPB Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    /// <summary>Field number for the "column_id" field.</summary>
    public const int ColumnIdFieldNumber = 4;
    private readonly static int ColumnIdDefaultValue = 0;

    private int columnId_;
    /// <summary>
    /// REMOVED: optional ColumnSchemaPB OBSOLETE_schema = 3;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ColumnId {
      get { if ((_hasBits0 & 1) != 0) { return columnId_; } else { return ColumnIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        columnId_ = value;
      }
    }
    /// <summary>Gets whether the "column_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasColumnId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "column_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearColumnId() {
      _hasBits0 &= ~1;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ColumnDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ColumnDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      if (ColumnId != other.ColumnId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (block_ != null) hash ^= Block.GetHashCode();
      if (HasColumnId) hash ^= ColumnId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (HasColumnId) {
        output.WriteRawTag(32);
        output.WriteInt32(ColumnId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (HasColumnId) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColumnId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ColumnDataPB other) {
      if (other == null) {
        return;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          Block = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
        }
        Block.MergeFrom(other.Block);
      }
      if (other.HasColumnId) {
        ColumnId = other.ColumnId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (block_ == null) {
              Block = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
            }
            input.ReadMessage(Block);
            break;
          }
          case 32: {
            ColumnId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeltaDataPB : pb::IMessage<DeltaDataPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<DeltaDataPB> _parser = new pb::MessageParser<DeltaDataPB>(() => new DeltaDataPB());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<DeltaDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeltaDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeltaDataPB(DeltaDataPB other) : this() {
      block_ = other.block_ != null ? other.block_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public DeltaDataPB Clone() {
      return new DeltaDataPB(this);
    }

    /// <summary>Field number for the "block" field.</summary>
    public const int BlockFieldNumber = 2;
    private global::Knet.Kudu.Client.Protobuf.BlockIdPB block_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.BlockIdPB Block {
      get { return block_; }
      set {
        block_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as DeltaDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(DeltaDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Block, other.Block)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (block_ != null) hash ^= Block.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (block_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Block);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (block_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Block);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(DeltaDataPB other) {
      if (other == null) {
        return;
      }
      if (other.block_ != null) {
        if (block_ == null) {
          Block = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
        }
        Block.MergeFrom(other.Block);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 18: {
            if (block_ == null) {
              Block = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
            }
            input.ReadMessage(Block);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RowSetDataPB : pb::IMessage<RowSetDataPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<RowSetDataPB> _parser = new pb::MessageParser<RowSetDataPB>(() => new RowSetDataPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RowSetDataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowSetDataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowSetDataPB(RowSetDataPB other) : this() {
      _hasBits0 = other._hasBits0;
      id_ = other.id_;
      lastDurableDmsId_ = other.lastDurableDmsId_;
      columns_ = other.columns_.Clone();
      redoDeltas_ = other.redoDeltas_.Clone();
      undoDeltas_ = other.undoDeltas_.Clone();
      bloomBlock_ = other.bloomBlock_ != null ? other.bloomBlock_.Clone() : null;
      adhocIndexBlock_ = other.adhocIndexBlock_ != null ? other.adhocIndexBlock_.Clone() : null;
      minEncodedKey_ = other.minEncodedKey_;
      maxEncodedKey_ = other.maxEncodedKey_;
      liveRowCount_ = other.liveRowCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RowSetDataPB Clone() {
      return new RowSetDataPB(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private readonly static ulong IdDefaultValue = 0UL;

    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Id {
      get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        id_ = value;
      }
    }
    /// <summary>Gets whether the "id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "last_durable_dms_id" field.</summary>
    public const int LastDurableDmsIdFieldNumber = 2;
    private readonly static long LastDurableDmsIdDefaultValue = 0L;

    private long lastDurableDmsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastDurableDmsId {
      get { if ((_hasBits0 & 2) != 0) { return lastDurableDmsId_; } else { return LastDurableDmsIdDefaultValue; } }
      set {
        _hasBits0 |= 2;
        lastDurableDmsId_ = value;
      }
    }
    /// <summary>Gets whether the "last_durable_dms_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastDurableDmsId {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "last_durable_dms_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastDurableDmsId() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "columns" field.</summary>
    public const int ColumnsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB> _repeated_columns_codec
        = pb::FieldCodec.ForMessage(26, global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB> columns_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.ColumnDataPB> Columns {
      get { return columns_; }
    }

    /// <summary>Field number for the "redo_deltas" field.</summary>
    public const int RedoDeltasFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> _repeated_redoDeltas_codec
        = pb::FieldCodec.ForMessage(34, global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> redoDeltas_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> RedoDeltas {
      get { return redoDeltas_; }
    }

    /// <summary>Field number for the "undo_deltas" field.</summary>
    public const int UndoDeltasFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> _repeated_undoDeltas_codec
        = pb::FieldCodec.ForMessage(42, global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> undoDeltas_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.DeltaDataPB> UndoDeltas {
      get { return undoDeltas_; }
    }

    /// <summary>Field number for the "bloom_block" field.</summary>
    public const int BloomBlockFieldNumber = 6;
    private global::Knet.Kudu.Client.Protobuf.BlockIdPB bloomBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.BlockIdPB BloomBlock {
      get { return bloomBlock_; }
      set {
        bloomBlock_ = value;
      }
    }

    /// <summary>Field number for the "adhoc_index_block" field.</summary>
    public const int AdhocIndexBlockFieldNumber = 7;
    private global::Knet.Kudu.Client.Protobuf.BlockIdPB adhocIndexBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.BlockIdPB AdhocIndexBlock {
      get { return adhocIndexBlock_; }
      set {
        adhocIndexBlock_ = value;
      }
    }

    /// <summary>Field number for the "min_encoded_key" field.</summary>
    public const int MinEncodedKeyFieldNumber = 8;
    private readonly static pb::ByteString MinEncodedKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString minEncodedKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString MinEncodedKey {
      get { return minEncodedKey_ ?? MinEncodedKeyDefaultValue; }
      set {
        minEncodedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "min_encoded_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMinEncodedKey {
      get { return minEncodedKey_ != null; }
    }
    /// <summary>Clears the value of the "min_encoded_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMinEncodedKey() {
      minEncodedKey_ = null;
    }

    /// <summary>Field number for the "max_encoded_key" field.</summary>
    public const int MaxEncodedKeyFieldNumber = 9;
    private readonly static pb::ByteString MaxEncodedKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString maxEncodedKey_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString MaxEncodedKey {
      get { return maxEncodedKey_ ?? MaxEncodedKeyDefaultValue; }
      set {
        maxEncodedKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "max_encoded_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMaxEncodedKey {
      get { return maxEncodedKey_ != null; }
    }
    /// <summary>Clears the value of the "max_encoded_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMaxEncodedKey() {
      maxEncodedKey_ = null;
    }

    /// <summary>Field number for the "live_row_count" field.</summary>
    public const int LiveRowCountFieldNumber = 10;
    private readonly static long LiveRowCountDefaultValue = 0L;

    private long liveRowCount_;
    /// <summary>
    /// Number of live rows that have been persisted.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LiveRowCount {
      get { if ((_hasBits0 & 4) != 0) { return liveRowCount_; } else { return LiveRowCountDefaultValue; } }
      set {
        _hasBits0 |= 4;
        liveRowCount_ = value;
      }
    }
    /// <summary>Gets whether the "live_row_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLiveRowCount {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "live_row_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLiveRowCount() {
      _hasBits0 &= ~4;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RowSetDataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RowSetDataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LastDurableDmsId != other.LastDurableDmsId) return false;
      if(!columns_.Equals(other.columns_)) return false;
      if(!redoDeltas_.Equals(other.redoDeltas_)) return false;
      if(!undoDeltas_.Equals(other.undoDeltas_)) return false;
      if (!object.Equals(BloomBlock, other.BloomBlock)) return false;
      if (!object.Equals(AdhocIndexBlock, other.AdhocIndexBlock)) return false;
      if (MinEncodedKey != other.MinEncodedKey) return false;
      if (MaxEncodedKey != other.MaxEncodedKey) return false;
      if (LiveRowCount != other.LiveRowCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasId) hash ^= Id.GetHashCode();
      if (HasLastDurableDmsId) hash ^= LastDurableDmsId.GetHashCode();
      hash ^= columns_.GetHashCode();
      hash ^= redoDeltas_.GetHashCode();
      hash ^= undoDeltas_.GetHashCode();
      if (bloomBlock_ != null) hash ^= BloomBlock.GetHashCode();
      if (adhocIndexBlock_ != null) hash ^= AdhocIndexBlock.GetHashCode();
      if (HasMinEncodedKey) hash ^= MinEncodedKey.GetHashCode();
      if (HasMaxEncodedKey) hash ^= MaxEncodedKey.GetHashCode();
      if (HasLiveRowCount) hash ^= LiveRowCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasId) {
        output.WriteRawTag(8);
        output.WriteUInt64(Id);
      }
      if (HasLastDurableDmsId) {
        output.WriteRawTag(16);
        output.WriteInt64(LastDurableDmsId);
      }
      columns_.WriteTo(ref output, _repeated_columns_codec);
      redoDeltas_.WriteTo(ref output, _repeated_redoDeltas_codec);
      undoDeltas_.WriteTo(ref output, _repeated_undoDeltas_codec);
      if (bloomBlock_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BloomBlock);
      }
      if (adhocIndexBlock_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(AdhocIndexBlock);
      }
      if (HasMinEncodedKey) {
        output.WriteRawTag(66);
        output.WriteBytes(MinEncodedKey);
      }
      if (HasMaxEncodedKey) {
        output.WriteRawTag(74);
        output.WriteBytes(MaxEncodedKey);
      }
      if (HasLiveRowCount) {
        output.WriteRawTag(80);
        output.WriteInt64(LiveRowCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasId) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Id);
      }
      if (HasLastDurableDmsId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastDurableDmsId);
      }
      size += columns_.CalculateSize(_repeated_columns_codec);
      size += redoDeltas_.CalculateSize(_repeated_redoDeltas_codec);
      size += undoDeltas_.CalculateSize(_repeated_undoDeltas_codec);
      if (bloomBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BloomBlock);
      }
      if (adhocIndexBlock_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdhocIndexBlock);
      }
      if (HasMinEncodedKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MinEncodedKey);
      }
      if (HasMaxEncodedKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(MaxEncodedKey);
      }
      if (HasLiveRowCount) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LiveRowCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RowSetDataPB other) {
      if (other == null) {
        return;
      }
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasLastDurableDmsId) {
        LastDurableDmsId = other.LastDurableDmsId;
      }
      columns_.Add(other.columns_);
      redoDeltas_.Add(other.redoDeltas_);
      undoDeltas_.Add(other.undoDeltas_);
      if (other.bloomBlock_ != null) {
        if (bloomBlock_ == null) {
          BloomBlock = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
        }
        BloomBlock.MergeFrom(other.BloomBlock);
      }
      if (other.adhocIndexBlock_ != null) {
        if (adhocIndexBlock_ == null) {
          AdhocIndexBlock = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
        }
        AdhocIndexBlock.MergeFrom(other.AdhocIndexBlock);
      }
      if (other.HasMinEncodedKey) {
        MinEncodedKey = other.MinEncodedKey;
      }
      if (other.HasMaxEncodedKey) {
        MaxEncodedKey = other.MaxEncodedKey;
      }
      if (other.HasLiveRowCount) {
        LiveRowCount = other.LiveRowCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadUInt64();
            break;
          }
          case 16: {
            LastDurableDmsId = input.ReadInt64();
            break;
          }
          case 26: {
            columns_.AddEntriesFrom(ref input, _repeated_columns_codec);
            break;
          }
          case 34: {
            redoDeltas_.AddEntriesFrom(ref input, _repeated_redoDeltas_codec);
            break;
          }
          case 42: {
            undoDeltas_.AddEntriesFrom(ref input, _repeated_undoDeltas_codec);
            break;
          }
          case 50: {
            if (bloomBlock_ == null) {
              BloomBlock = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
            }
            input.ReadMessage(BloomBlock);
            break;
          }
          case 58: {
            if (adhocIndexBlock_ == null) {
              AdhocIndexBlock = new global::Knet.Kudu.Client.Protobuf.BlockIdPB();
            }
            input.ReadMessage(AdhocIndexBlock);
            break;
          }
          case 66: {
            MinEncodedKey = input.ReadBytes();
            break;
          }
          case 74: {
            MaxEncodedKey = input.ReadBytes();
            break;
          }
          case 80: {
            LiveRowCount = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Metadata that indicates the state of a transaction.
  /// </summary>
  public sealed partial class TxnMetadataPB : pb::IMessage<TxnMetadataPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TxnMetadataPB> _parser = new pb::MessageParser<TxnMetadataPB>(() => new TxnMetadataPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TxnMetadataPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TxnMetadataPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TxnMetadataPB(TxnMetadataPB other) : this() {
      _hasBits0 = other._hasBits0;
      aborted_ = other.aborted_;
      commitTimestamp_ = other.commitTimestamp_;
      commitMvccOpTimestamp_ = other.commitMvccOpTimestamp_;
      flushedCommittedMrs_ = other.flushedCommittedMrs_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TxnMetadataPB Clone() {
      return new TxnMetadataPB(this);
    }

    /// <summary>Field number for the "aborted" field.</summary>
    public const int AbortedFieldNumber = 1;
    private readonly static bool AbortedDefaultValue = false;

    private bool aborted_;
    /// <summary>
    /// Whether the transaction was aborted. If true, 'commit_timestamp' must not
    /// be set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Aborted {
      get { if ((_hasBits0 & 1) != 0) { return aborted_; } else { return AbortedDefaultValue; } }
      set {
        _hasBits0 |= 1;
        aborted_ = value;
      }
    }
    /// <summary>Gets whether the "aborted" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAborted {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "aborted" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAborted() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "commit_timestamp" field.</summary>
    public const int CommitTimestampFieldNumber = 2;
    private readonly static long CommitTimestampDefaultValue = 0L;

    private long commitTimestamp_;
    /// <summary>
    /// The commit timestamp of the transaction. If set, 'aborted' must not be
    /// set.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CommitTimestamp {
      get { if ((_hasBits0 & 2) != 0) { return commitTimestamp_; } else { return CommitTimestampDefaultValue; } }
      set {
        _hasBits0 |= 2;
        commitTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "commit_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommitTimestamp {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "commit_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommitTimestamp() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "commit_mvcc_op_timestamp" field.</summary>
    public const int CommitMvccOpTimestampFieldNumber = 3;
    private readonly static long CommitMvccOpTimestampDefaultValue = 0L;

    private long commitMvccOpTimestamp_;
    /// <summary>
    /// The timestamp used by the MVCC op that tracks the commit of this
    /// transaction. This is sent to the transaction status manager in response to
    /// a BEGIN_COMMIT request to be used to assign a commit timestamp that is
    /// higher than all participants' commit MVCC op timestamps.
    ///
    /// When iterating through mutations at a specific clean snapshot (as in a
    /// READ_AT_SNAPSHOT or diff scan), both this MVCC op timestamp and the commit
    /// timestamp must be applied for the mutation to be considered committed in
    /// that snapshot.
    ///
    /// When iterating through mutations at the latest snapshot (as in READ_LATEST
    /// or during compactions), this MVCC op timestamp must be applied and there
    /// must be a commit timestamp for the mutation to be considered committed --
    /// this avoids reading dirty, uncommitted rows.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long CommitMvccOpTimestamp {
      get { if ((_hasBits0 & 4) != 0) { return commitMvccOpTimestamp_; } else { return CommitMvccOpTimestampDefaultValue; } }
      set {
        _hasBits0 |= 4;
        commitMvccOpTimestamp_ = value;
      }
    }
    /// <summary>Gets whether the "commit_mvcc_op_timestamp" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCommitMvccOpTimestamp {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "commit_mvcc_op_timestamp" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCommitMvccOpTimestamp() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "flushed_committed_mrs" field.</summary>
    public const int FlushedCommittedMrsFieldNumber = 4;
    private readonly static bool FlushedCommittedMrsDefaultValue = false;

    private bool flushedCommittedMrs_;
    /// <summary>
    /// Whether or not this transaction has flushed its MRS after committing. If
    /// set to true, Kudu should not create an MRS for this transaction when
    /// bootstrapping.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FlushedCommittedMrs {
      get { if ((_hasBits0 & 8) != 0) { return flushedCommittedMrs_; } else { return FlushedCommittedMrsDefaultValue; } }
      set {
        _hasBits0 |= 8;
        flushedCommittedMrs_ = value;
      }
    }
    /// <summary>Gets whether the "flushed_committed_mrs" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasFlushedCommittedMrs {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "flushed_committed_mrs" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearFlushedCommittedMrs() {
      _hasBits0 &= ~8;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TxnMetadataPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TxnMetadataPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Aborted != other.Aborted) return false;
      if (CommitTimestamp != other.CommitTimestamp) return false;
      if (CommitMvccOpTimestamp != other.CommitMvccOpTimestamp) return false;
      if (FlushedCommittedMrs != other.FlushedCommittedMrs) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasAborted) hash ^= Aborted.GetHashCode();
      if (HasCommitTimestamp) hash ^= CommitTimestamp.GetHashCode();
      if (HasCommitMvccOpTimestamp) hash ^= CommitMvccOpTimestamp.GetHashCode();
      if (HasFlushedCommittedMrs) hash ^= FlushedCommittedMrs.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasAborted) {
        output.WriteRawTag(8);
        output.WriteBool(Aborted);
      }
      if (HasCommitTimestamp) {
        output.WriteRawTag(16);
        output.WriteInt64(CommitTimestamp);
      }
      if (HasCommitMvccOpTimestamp) {
        output.WriteRawTag(24);
        output.WriteInt64(CommitMvccOpTimestamp);
      }
      if (HasFlushedCommittedMrs) {
        output.WriteRawTag(32);
        output.WriteBool(FlushedCommittedMrs);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasAborted) {
        size += 1 + 1;
      }
      if (HasCommitTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitTimestamp);
      }
      if (HasCommitMvccOpTimestamp) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CommitMvccOpTimestamp);
      }
      if (HasFlushedCommittedMrs) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TxnMetadataPB other) {
      if (other == null) {
        return;
      }
      if (other.HasAborted) {
        Aborted = other.Aborted;
      }
      if (other.HasCommitTimestamp) {
        CommitTimestamp = other.CommitTimestamp;
      }
      if (other.HasCommitMvccOpTimestamp) {
        CommitMvccOpTimestamp = other.CommitMvccOpTimestamp;
      }
      if (other.HasFlushedCommittedMrs) {
        FlushedCommittedMrs = other.FlushedCommittedMrs;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Aborted = input.ReadBool();
            break;
          }
          case 16: {
            CommitTimestamp = input.ReadInt64();
            break;
          }
          case 24: {
            CommitMvccOpTimestamp = input.ReadInt64();
            break;
          }
          case 32: {
            FlushedCommittedMrs = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The super-block keeps track of the tablet data blocks.
  /// A tablet contains one or more RowSets, which contain
  /// a set of blocks (one for each column), a set of delta blocks
  /// and optionally a block containing the bloom filter
  /// and a block containing the compound-keys.
  /// </summary>
  public sealed partial class TabletSuperBlockPB : pb::IMessage<TabletSuperBlockPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<TabletSuperBlockPB> _parser = new pb::MessageParser<TabletSuperBlockPB>(() => new TabletSuperBlockPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TabletSuperBlockPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TabletSuperBlockPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TabletSuperBlockPB(TabletSuperBlockPB other) : this() {
      _hasBits0 = other._hasBits0;
      tableId_ = other.tableId_;
      tabletId_ = other.tabletId_;
      tableType_ = other.tableType_;
      lastDurableMrsId_ = other.lastDurableMrsId_;
      startKey_ = other.startKey_;
      endKey_ = other.endKey_;
      partition_ = other.partition_ != null ? other.partition_.Clone() : null;
      rowsets_ = other.rowsets_.Clone();
      tableName_ = other.tableName_;
      schema_ = other.schema_ != null ? other.schema_.Clone() : null;
      schemaVersion_ = other.schemaVersion_;
      partitionSchema_ = other.partitionSchema_ != null ? other.partitionSchema_.Clone() : null;
      tabletDataState_ = other.tabletDataState_;
      orphanedBlocks_ = other.orphanedBlocks_.Clone();
      tombstoneLastLoggedOpid_ = other.tombstoneLastLoggedOpid_ != null ? other.tombstoneLastLoggedOpid_.Clone() : null;
      dataDirGroup_ = other.dataDirGroup_ != null ? other.dataDirGroup_.Clone() : null;
      supportsLiveRowCount_ = other.supportsLiveRowCount_;
      extraConfig_ = other.extraConfig_ != null ? other.extraConfig_.Clone() : null;
      dimensionLabel_ = other.dimensionLabel_;
      txnMetadata_ = other.txnMetadata_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TabletSuperBlockPB Clone() {
      return new TabletSuperBlockPB(this);
    }

    /// <summary>Field number for the "table_id" field.</summary>
    public const int TableIdFieldNumber = 1;
    private readonly static pb::ByteString TableIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString tableId_;
    /// <summary>
    /// Table ID of the table this tablet is part of.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TableId {
      get { return tableId_ ?? TableIdDefaultValue; }
      set {
        tableId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "table_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableId {
      get { return tableId_ != null; }
    }
    /// <summary>Clears the value of the "table_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableId() {
      tableId_ = null;
    }

    /// <summary>Field number for the "tablet_id" field.</summary>
    public const int TabletIdFieldNumber = 2;
    private readonly static pb::ByteString TabletIdDefaultValue = pb::ByteString.Empty;

    private pb::ByteString tabletId_;
    /// <summary>
    /// Tablet Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString TabletId {
      get { return tabletId_ ?? TabletIdDefaultValue; }
      set {
        tabletId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "tablet_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTabletId {
      get { return tabletId_ != null; }
    }
    /// <summary>Clears the value of the "tablet_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTabletId() {
      tabletId_ = null;
    }

    /// <summary>Field number for the "table_type" field.</summary>
    public const int TableTypeFieldNumber = 19;
    private readonly static global::Knet.Kudu.Client.Protobuf.TableTypePB TableTypeDefaultValue = global::Knet.Kudu.Client.Protobuf.TableTypePB.DefaultTable;

    private global::Knet.Kudu.Client.Protobuf.TableTypePB tableType_;
    /// <summary>
    /// The type of table this tablet belongs to. If not set, the assumption is
    /// this is a user-defined table as opposed to a Kudu-internal system table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.TableTypePB TableType {
      get { if ((_hasBits0 & 16) != 0) { return tableType_; } else { return TableTypeDefaultValue; } }
      set {
        _hasBits0 |= 16;
        tableType_ = value;
      }
    }
    /// <summary>Gets whether the "table_type" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableType {
      get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "table_type" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableType() {
      _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "last_durable_mrs_id" field.</summary>
    public const int LastDurableMrsIdFieldNumber = 3;
    private readonly static long LastDurableMrsIdDefaultValue = 0L;

    private long lastDurableMrsId_;
    /// <summary>
    /// The latest durable MemRowSet id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public long LastDurableMrsId {
      get { if ((_hasBits0 & 1) != 0) { return lastDurableMrsId_; } else { return LastDurableMrsIdDefaultValue; } }
      set {
        _hasBits0 |= 1;
        lastDurableMrsId_ = value;
      }
    }
    /// <summary>Gets whether the "last_durable_mrs_id" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLastDurableMrsId {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "last_durable_mrs_id" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLastDurableMrsId() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "start_key" field.</summary>
    public const int StartKeyFieldNumber = 4;
    private readonly static pb::ByteString StartKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString startKey_;
    /// <summary>
    /// DEPRECATED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString StartKey {
      get { return startKey_ ?? StartKeyDefaultValue; }
      set {
        startKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "start_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasStartKey {
      get { return startKey_ != null; }
    }
    /// <summary>Clears the value of the "start_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearStartKey() {
      startKey_ = null;
    }

    /// <summary>Field number for the "end_key" field.</summary>
    public const int EndKeyFieldNumber = 5;
    private readonly static pb::ByteString EndKeyDefaultValue = pb::ByteString.Empty;

    private pb::ByteString endKey_;
    /// <summary>
    /// DEPRECATED.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pb::ByteString EndKey {
      get { return endKey_ ?? EndKeyDefaultValue; }
      set {
        endKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "end_key" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEndKey {
      get { return endKey_ != null; }
    }
    /// <summary>Clears the value of the "end_key" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEndKey() {
      endKey_ = null;
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 13;
    private global::Knet.Kudu.Client.Protobuf.PartitionPB partition_;
    /// <summary>
    /// The partition of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.PartitionPB Partition {
      get { return partition_; }
      set {
        partition_ = value;
      }
    }

    /// <summary>Field number for the "rowsets" field.</summary>
    public const int RowsetsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB> _repeated_rowsets_codec
        = pb::FieldCodec.ForMessage(50, global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB> rowsets_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB>();
    /// <summary>
    /// Tablet RowSets
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.Tablet.RowSetDataPB> Rowsets {
      get { return rowsets_; }
    }

    /// <summary>Field number for the "table_name" field.</summary>
    public const int TableNameFieldNumber = 7;
    private readonly static string TableNameDefaultValue = "";

    private string tableName_;
    /// <summary>
    /// The latest schema
    /// TODO: maybe this should be TableSchemaPB? Need to actually put those attributes
    /// into use throughout the code. Using the simpler one for now.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TableName {
      get { return tableName_ ?? TableNameDefaultValue; }
      set {
        tableName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "table_name" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTableName {
      get { return tableName_ != null; }
    }
    /// <summary>Clears the value of the "table_name" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTableName() {
      tableName_ = null;
    }

    /// <summary>Field number for the "schema" field.</summary>
    public const int SchemaFieldNumber = 8;
    private global::Knet.Kudu.Client.Protobuf.SchemaPB schema_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.SchemaPB Schema {
      get { return schema_; }
      set {
        schema_ = value;
      }
    }

    /// <summary>Field number for the "schema_version" field.</summary>
    public const int SchemaVersionFieldNumber = 9;
    private readonly static uint SchemaVersionDefaultValue = 0;

    private uint schemaVersion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint SchemaVersion {
      get { if ((_hasBits0 & 2) != 0) { return schemaVersion_; } else { return SchemaVersionDefaultValue; } }
      set {
        _hasBits0 |= 2;
        schemaVersion_ = value;
      }
    }
    /// <summary>Gets whether the "schema_version" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSchemaVersion {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "schema_version" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSchemaVersion() {
      _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "partition_schema" field.</summary>
    public const int PartitionSchemaFieldNumber = 14;
    private global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB partitionSchema_;
    /// <summary>
    /// The partition schema of the table.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB PartitionSchema {
      get { return partitionSchema_; }
      set {
        partitionSchema_ = value;
      }
    }

    /// <summary>Field number for the "tablet_data_state" field.</summary>
    public const int TabletDataStateFieldNumber = 10;
    private readonly static global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState TabletDataStateDefaultValue = global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState.TabletDataUnknown;

    private global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState tabletDataState_;
    /// <summary>
    /// The current state of the tablet's data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState TabletDataState {
      get { if ((_hasBits0 & 4) != 0) { return tabletDataState_; } else { return TabletDataStateDefaultValue; } }
      set {
        _hasBits0 |= 4;
        tabletDataState_ = value;
      }
    }
    /// <summary>Gets whether the "tablet_data_state" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasTabletDataState {
      get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "tablet_data_state" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearTabletDataState() {
      _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "orphaned_blocks" field.</summary>
    public const int OrphanedBlocksFieldNumber = 11;
    private static readonly pb::FieldCodec<global::Knet.Kudu.Client.Protobuf.BlockIdPB> _repeated_orphanedBlocks_codec
        = pb::FieldCodec.ForMessage(90, global::Knet.Kudu.Client.Protobuf.BlockIdPB.Parser);
    private readonly pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockIdPB> orphanedBlocks_ = new pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockIdPB>();
    /// <summary>
    /// Blocks that became orphans after flushing this superblock. In other
    /// words, the set difference of the blocks belonging to the previous
    /// superblock and this one.
    ///
    /// It's always safe to delete the blocks found here.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Knet.Kudu.Client.Protobuf.BlockIdPB> OrphanedBlocks {
      get { return orphanedBlocks_; }
    }

    /// <summary>Field number for the "tombstone_last_logged_opid" field.</summary>
    public const int TombstoneLastLoggedOpidFieldNumber = 12;
    private global::Knet.Kudu.Client.Protobuf.Consensus.OpId tombstoneLastLoggedOpid_;
    /// <summary>
    /// For tablets that have been tombstoned, stores the last OpId stored in the
    /// WAL before tombstoning.
    /// Only relevant for TOMBSTONED tablets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.Consensus.OpId TombstoneLastLoggedOpid {
      get { return tombstoneLastLoggedOpid_; }
      set {
        tombstoneLastLoggedOpid_ = value;
      }
    }

    /// <summary>Field number for the "data_dir_group" field.</summary>
    public const int DataDirGroupFieldNumber = 15;
    private global::Knet.Kudu.Client.Protobuf.DataDirGroupPB dataDirGroup_;
    /// <summary>
    /// Tablet data is spread across a data directory group. If this is not set
    /// and the tablet state is TABLET_DATA_READY, it is assumed that the data is
    /// from a version of Kudu before 1.5.0. In this case, a new group will be
    /// created spanning all data directories.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.DataDirGroupPB DataDirGroup {
      get { return dataDirGroup_; }
      set {
        dataDirGroup_ = value;
      }
    }

    /// <summary>Field number for the "supports_live_row_count" field.</summary>
    public const int SupportsLiveRowCountFieldNumber = 16;
    private readonly static bool SupportsLiveRowCountDefaultValue = false;

    private bool supportsLiveRowCount_;
    /// <summary>
    /// Whether the tablet supports counting live row. If false, 'live_row_count'
    /// may be inaccurate and should be ignored. It's only supported for the newly
    /// created ones, not for the ancient ones.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool SupportsLiveRowCount {
      get { if ((_hasBits0 & 8) != 0) { return supportsLiveRowCount_; } else { return SupportsLiveRowCountDefaultValue; } }
      set {
        _hasBits0 |= 8;
        supportsLiveRowCount_ = value;
      }
    }
    /// <summary>Gets whether the "supports_live_row_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasSupportsLiveRowCount {
      get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "supports_live_row_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearSupportsLiveRowCount() {
      _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "extra_config" field.</summary>
    public const int ExtraConfigFieldNumber = 17;
    private global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB extraConfig_;
    /// <summary>
    /// The table's extra-config.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB ExtraConfig {
      get { return extraConfig_; }
      set {
        extraConfig_ = value;
      }
    }

    /// <summary>Field number for the "dimension_label" field.</summary>
    public const int DimensionLabelFieldNumber = 18;
    private readonly static string DimensionLabelDefaultValue = "";

    private string dimensionLabel_;
    /// <summary>
    /// The dimension label for tablet. Used by the master to determine load when
    /// creating new tablet replicas based on dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DimensionLabel {
      get { return dimensionLabel_ ?? DimensionLabelDefaultValue; }
      set {
        dimensionLabel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }
    /// <summary>Gets whether the "dimension_label" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDimensionLabel {
      get { return dimensionLabel_ != null; }
    }
    /// <summary>Clears the value of the "dimension_label" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDimensionLabel() {
      dimensionLabel_ = null;
    }

    /// <summary>Field number for the "txn_metadata" field.</summary>
    public const int TxnMetadataFieldNumber = 20;
    private static readonly pbc::MapField<long, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB>.Codec _map_txnMetadata_codec
        = new pbc::MapField<long, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB>.Codec(pb::FieldCodec.ForInt64(8, 0L), pb::FieldCodec.ForMessage(18, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB.Parser), 162);
    private readonly pbc::MapField<long, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB> txnMetadata_ = new pbc::MapField<long, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB>();
    /// <summary>
    /// Map from txn ID to metadata associated with the transaction. This is
    /// updated on each metadata flush to reflect the current in-memory state of
    /// transactions. In between an in-memory state update and a flush,
    /// participant ops should be anchored to replay the updates upon restarting.
    /// TODO(awong): consider storing these separately from the superblock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::MapField<long, global::Knet.Kudu.Client.Protobuf.Tablet.TxnMetadataPB> TxnMetadata {
      get { return txnMetadata_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TabletSuperBlockPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TabletSuperBlockPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TableId != other.TableId) return false;
      if (TabletId != other.TabletId) return false;
      if (TableType != other.TableType) return false;
      if (LastDurableMrsId != other.LastDurableMrsId) return false;
      if (StartKey != other.StartKey) return false;
      if (EndKey != other.EndKey) return false;
      if (!object.Equals(Partition, other.Partition)) return false;
      if(!rowsets_.Equals(other.rowsets_)) return false;
      if (TableName != other.TableName) return false;
      if (!object.Equals(Schema, other.Schema)) return false;
      if (SchemaVersion != other.SchemaVersion) return false;
      if (!object.Equals(PartitionSchema, other.PartitionSchema)) return false;
      if (TabletDataState != other.TabletDataState) return false;
      if(!orphanedBlocks_.Equals(other.orphanedBlocks_)) return false;
      if (!object.Equals(TombstoneLastLoggedOpid, other.TombstoneLastLoggedOpid)) return false;
      if (!object.Equals(DataDirGroup, other.DataDirGroup)) return false;
      if (SupportsLiveRowCount != other.SupportsLiveRowCount) return false;
      if (!object.Equals(ExtraConfig, other.ExtraConfig)) return false;
      if (DimensionLabel != other.DimensionLabel) return false;
      if (!TxnMetadata.Equals(other.TxnMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasTableId) hash ^= TableId.GetHashCode();
      if (HasTabletId) hash ^= TabletId.GetHashCode();
      if (HasTableType) hash ^= TableType.GetHashCode();
      if (HasLastDurableMrsId) hash ^= LastDurableMrsId.GetHashCode();
      if (HasStartKey) hash ^= StartKey.GetHashCode();
      if (HasEndKey) hash ^= EndKey.GetHashCode();
      if (partition_ != null) hash ^= Partition.GetHashCode();
      hash ^= rowsets_.GetHashCode();
      if (HasTableName) hash ^= TableName.GetHashCode();
      if (schema_ != null) hash ^= Schema.GetHashCode();
      if (HasSchemaVersion) hash ^= SchemaVersion.GetHashCode();
      if (partitionSchema_ != null) hash ^= PartitionSchema.GetHashCode();
      if (HasTabletDataState) hash ^= TabletDataState.GetHashCode();
      hash ^= orphanedBlocks_.GetHashCode();
      if (tombstoneLastLoggedOpid_ != null) hash ^= TombstoneLastLoggedOpid.GetHashCode();
      if (dataDirGroup_ != null) hash ^= DataDirGroup.GetHashCode();
      if (HasSupportsLiveRowCount) hash ^= SupportsLiveRowCount.GetHashCode();
      if (extraConfig_ != null) hash ^= ExtraConfig.GetHashCode();
      if (HasDimensionLabel) hash ^= DimensionLabel.GetHashCode();
      hash ^= TxnMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasTableId) {
        output.WriteRawTag(10);
        output.WriteBytes(TableId);
      }
      if (HasTabletId) {
        output.WriteRawTag(18);
        output.WriteBytes(TabletId);
      }
      if (HasLastDurableMrsId) {
        output.WriteRawTag(24);
        output.WriteInt64(LastDurableMrsId);
      }
      if (HasStartKey) {
        output.WriteRawTag(34);
        output.WriteBytes(StartKey);
      }
      if (HasEndKey) {
        output.WriteRawTag(42);
        output.WriteBytes(EndKey);
      }
      rowsets_.WriteTo(ref output, _repeated_rowsets_codec);
      if (HasTableName) {
        output.WriteRawTag(58);
        output.WriteString(TableName);
      }
      if (schema_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Schema);
      }
      if (HasSchemaVersion) {
        output.WriteRawTag(72);
        output.WriteUInt32(SchemaVersion);
      }
      if (HasTabletDataState) {
        output.WriteRawTag(80);
        output.WriteEnum((int) TabletDataState);
      }
      orphanedBlocks_.WriteTo(ref output, _repeated_orphanedBlocks_codec);
      if (tombstoneLastLoggedOpid_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TombstoneLastLoggedOpid);
      }
      if (partition_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Partition);
      }
      if (partitionSchema_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(PartitionSchema);
      }
      if (dataDirGroup_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(DataDirGroup);
      }
      if (HasSupportsLiveRowCount) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SupportsLiveRowCount);
      }
      if (extraConfig_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(ExtraConfig);
      }
      if (HasDimensionLabel) {
        output.WriteRawTag(146, 1);
        output.WriteString(DimensionLabel);
      }
      if (HasTableType) {
        output.WriteRawTag(152, 1);
        output.WriteEnum((int) TableType);
      }
      txnMetadata_.WriteTo(ref output, _map_txnMetadata_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasTableId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TableId);
      }
      if (HasTabletId) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(TabletId);
      }
      if (HasTableType) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) TableType);
      }
      if (HasLastDurableMrsId) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastDurableMrsId);
      }
      if (HasStartKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(StartKey);
      }
      if (HasEndKey) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(EndKey);
      }
      if (partition_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Partition);
      }
      size += rowsets_.CalculateSize(_repeated_rowsets_codec);
      if (HasTableName) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TableName);
      }
      if (schema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schema);
      }
      if (HasSchemaVersion) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SchemaVersion);
      }
      if (partitionSchema_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PartitionSchema);
      }
      if (HasTabletDataState) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TabletDataState);
      }
      size += orphanedBlocks_.CalculateSize(_repeated_orphanedBlocks_codec);
      if (tombstoneLastLoggedOpid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TombstoneLastLoggedOpid);
      }
      if (dataDirGroup_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataDirGroup);
      }
      if (HasSupportsLiveRowCount) {
        size += 2 + 1;
      }
      if (extraConfig_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExtraConfig);
      }
      if (HasDimensionLabel) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DimensionLabel);
      }
      size += txnMetadata_.CalculateSize(_map_txnMetadata_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TabletSuperBlockPB other) {
      if (other == null) {
        return;
      }
      if (other.HasTableId) {
        TableId = other.TableId;
      }
      if (other.HasTabletId) {
        TabletId = other.TabletId;
      }
      if (other.HasTableType) {
        TableType = other.TableType;
      }
      if (other.HasLastDurableMrsId) {
        LastDurableMrsId = other.LastDurableMrsId;
      }
      if (other.HasStartKey) {
        StartKey = other.StartKey;
      }
      if (other.HasEndKey) {
        EndKey = other.EndKey;
      }
      if (other.partition_ != null) {
        if (partition_ == null) {
          Partition = new global::Knet.Kudu.Client.Protobuf.PartitionPB();
        }
        Partition.MergeFrom(other.Partition);
      }
      rowsets_.Add(other.rowsets_);
      if (other.HasTableName) {
        TableName = other.TableName;
      }
      if (other.schema_ != null) {
        if (schema_ == null) {
          Schema = new global::Knet.Kudu.Client.Protobuf.SchemaPB();
        }
        Schema.MergeFrom(other.Schema);
      }
      if (other.HasSchemaVersion) {
        SchemaVersion = other.SchemaVersion;
      }
      if (other.partitionSchema_ != null) {
        if (partitionSchema_ == null) {
          PartitionSchema = new global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB();
        }
        PartitionSchema.MergeFrom(other.PartitionSchema);
      }
      if (other.HasTabletDataState) {
        TabletDataState = other.TabletDataState;
      }
      orphanedBlocks_.Add(other.orphanedBlocks_);
      if (other.tombstoneLastLoggedOpid_ != null) {
        if (tombstoneLastLoggedOpid_ == null) {
          TombstoneLastLoggedOpid = new global::Knet.Kudu.Client.Protobuf.Consensus.OpId();
        }
        TombstoneLastLoggedOpid.MergeFrom(other.TombstoneLastLoggedOpid);
      }
      if (other.dataDirGroup_ != null) {
        if (dataDirGroup_ == null) {
          DataDirGroup = new global::Knet.Kudu.Client.Protobuf.DataDirGroupPB();
        }
        DataDirGroup.MergeFrom(other.DataDirGroup);
      }
      if (other.HasSupportsLiveRowCount) {
        SupportsLiveRowCount = other.SupportsLiveRowCount;
      }
      if (other.extraConfig_ != null) {
        if (extraConfig_ == null) {
          ExtraConfig = new global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB();
        }
        ExtraConfig.MergeFrom(other.ExtraConfig);
      }
      if (other.HasDimensionLabel) {
        DimensionLabel = other.DimensionLabel;
      }
      txnMetadata_.Add(other.txnMetadata_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TableId = input.ReadBytes();
            break;
          }
          case 18: {
            TabletId = input.ReadBytes();
            break;
          }
          case 24: {
            LastDurableMrsId = input.ReadInt64();
            break;
          }
          case 34: {
            StartKey = input.ReadBytes();
            break;
          }
          case 42: {
            EndKey = input.ReadBytes();
            break;
          }
          case 50: {
            rowsets_.AddEntriesFrom(ref input, _repeated_rowsets_codec);
            break;
          }
          case 58: {
            TableName = input.ReadString();
            break;
          }
          case 66: {
            if (schema_ == null) {
              Schema = new global::Knet.Kudu.Client.Protobuf.SchemaPB();
            }
            input.ReadMessage(Schema);
            break;
          }
          case 72: {
            SchemaVersion = input.ReadUInt32();
            break;
          }
          case 80: {
            TabletDataState = (global::Knet.Kudu.Client.Protobuf.Tablet.TabletDataState) input.ReadEnum();
            break;
          }
          case 90: {
            orphanedBlocks_.AddEntriesFrom(ref input, _repeated_orphanedBlocks_codec);
            break;
          }
          case 98: {
            if (tombstoneLastLoggedOpid_ == null) {
              TombstoneLastLoggedOpid = new global::Knet.Kudu.Client.Protobuf.Consensus.OpId();
            }
            input.ReadMessage(TombstoneLastLoggedOpid);
            break;
          }
          case 106: {
            if (partition_ == null) {
              Partition = new global::Knet.Kudu.Client.Protobuf.PartitionPB();
            }
            input.ReadMessage(Partition);
            break;
          }
          case 114: {
            if (partitionSchema_ == null) {
              PartitionSchema = new global::Knet.Kudu.Client.Protobuf.PartitionSchemaPB();
            }
            input.ReadMessage(PartitionSchema);
            break;
          }
          case 122: {
            if (dataDirGroup_ == null) {
              DataDirGroup = new global::Knet.Kudu.Client.Protobuf.DataDirGroupPB();
            }
            input.ReadMessage(DataDirGroup);
            break;
          }
          case 128: {
            SupportsLiveRowCount = input.ReadBool();
            break;
          }
          case 138: {
            if (extraConfig_ == null) {
              ExtraConfig = new global::Knet.Kudu.Client.Protobuf.TableExtraConfigPB();
            }
            input.ReadMessage(ExtraConfig);
            break;
          }
          case 146: {
            DimensionLabel = input.ReadString();
            break;
          }
          case 152: {
            TableType = (global::Knet.Kudu.Client.Protobuf.TableTypePB) input.ReadEnum();
            break;
          }
          case 162: {
            txnMetadata_.AddEntriesFrom(ref input, _map_txnMetadata_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Statistics for a tablet replica.
  /// </summary>
  public sealed partial class ReportedTabletStatsPB : pb::IMessage<ReportedTabletStatsPB>
      , pb::IBufferMessage
  {
    private static readonly pb::MessageParser<ReportedTabletStatsPB> _parser = new pb::MessageParser<ReportedTabletStatsPB>(() => new ReportedTabletStatsPB());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ReportedTabletStatsPB> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Knet.Kudu.Client.Protobuf.Tablet.MetadataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportedTabletStatsPB() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportedTabletStatsPB(ReportedTabletStatsPB other) : this() {
      _hasBits0 = other._hasBits0;
      onDiskSize_ = other.onDiskSize_;
      liveRowCount_ = other.liveRowCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ReportedTabletStatsPB Clone() {
      return new ReportedTabletStatsPB(this);
    }

    /// <summary>Field number for the "on_disk_size" field.</summary>
    public const int OnDiskSizeFieldNumber = 1;
    private readonly static ulong OnDiskSizeDefaultValue = 0UL;

    private ulong onDiskSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong OnDiskSize {
      get { if ((_hasBits0 & 1) != 0) { return onDiskSize_; } else { return OnDiskSizeDefaultValue; } }
      set {
        _hasBits0 |= 1;
        onDiskSize_ = value;
      }
    }
    /// <summary>Gets whether the "on_disk_size" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOnDiskSize {
      get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "on_disk_size" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOnDiskSize() {
      _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "live_row_count" field.</summary>
    public const int LiveRowCountFieldNumber = 2;
    private readonly static ulong LiveRowCountDefaultValue = 0UL;

    private ulong liveRowCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong LiveRowCount {
      get { if ((_hasBits0 & 2) != 0) { return liveRowCount_; } else { return LiveRowCountDefaultValue; } }
      set {
        _hasBits0 |= 2;
        liveRowCount_ = value;
      }
    }
    /// <summary>Gets whether the "live_row_count" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasLiveRowCount {
      get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "live_row_count" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearLiveRowCount() {
      _hasBits0 &= ~2;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ReportedTabletStatsPB);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ReportedTabletStatsPB other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OnDiskSize != other.OnDiskSize) return false;
      if (LiveRowCount != other.LiveRowCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (HasOnDiskSize) hash ^= OnDiskSize.GetHashCode();
      if (HasLiveRowCount) hash ^= LiveRowCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
      output.WriteRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (HasOnDiskSize) {
        output.WriteRawTag(8);
        output.WriteUInt64(OnDiskSize);
      }
      if (HasLiveRowCount) {
        output.WriteRawTag(16);
        output.WriteUInt64(LiveRowCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (HasOnDiskSize) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(OnDiskSize);
      }
      if (HasLiveRowCount) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LiveRowCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ReportedTabletStatsPB other) {
      if (other == null) {
        return;
      }
      if (other.HasOnDiskSize) {
        OnDiskSize = other.OnDiskSize;
      }
      if (other.HasLiveRowCount) {
        LiveRowCount = other.LiveRowCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
      input.ReadRawMessage(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            OnDiskSize = input.ReadUInt64();
            break;
          }
          case 16: {
            LiveRowCount = input.ReadUInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
